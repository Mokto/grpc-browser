// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file search_engine-v1.proto (package search_engine, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Email, Person } from "./search_engine_people-v1_pb.js";
import { Company } from "./search_engine_companies-v1_pb.js";
import { CompaniesFilters } from "./search_engine_companies_parameters-v1_pb.js";
import { PeopleFilters } from "./search_engine_people_parameters-v1_pb.js";

/**
 * @generated from enum search_engine.Collection
 */
export enum Collection {
  /**
   * @generated from enum value: Companies = 0;
   */
  Companies = 0,

  /**
   * @generated from enum value: People = 1;
   */
  People = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Collection)
proto3.util.setEnumType(Collection, "search_engine.Collection", [
  { no: 0, name: "Companies" },
  { no: 1, name: "People" },
]);

/**
 * @generated from enum search_engine.EmailStatus
 */
export enum EmailStatus {
  /**
   * @generated from enum value: Found = 0;
   */
  Found = 0,

  /**
   * @generated from enum value: NotVerified = 1;
   */
  NotVerified = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(EmailStatus)
proto3.util.setEnumType(EmailStatus, "search_engine.EmailStatus", [
  { no: 0, name: "Found" },
  { no: 1, name: "NotVerified" },
]);

/**
 * @generated from enum search_engine.EmailFoundStatus
 */
export enum EmailFoundStatus {
  /**
   * @generated from enum value: Verified = 0;
   */
  Verified = 0,

  /**
   * @generated from enum value: HighConfidence = 1;
   */
  HighConfidence = 1,

  /**
   * @generated from enum value: MediumConfidence = 2;
   */
  MediumConfidence = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EmailFoundStatus)
proto3.util.setEnumType(EmailFoundStatus, "search_engine.EmailFoundStatus", [
  { no: 0, name: "Verified" },
  { no: 1, name: "HighConfidence" },
  { no: 2, name: "MediumConfidence" },
]);

/**
 * @generated from message search_engine.GetDataFieldsRequest
 */
export class GetDataFieldsRequest extends Message<GetDataFieldsRequest> {
  constructor(data?: PartialMessage<GetDataFieldsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.GetDataFieldsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataFieldsRequest {
    return new GetDataFieldsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataFieldsRequest {
    return new GetDataFieldsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataFieldsRequest {
    return new GetDataFieldsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDataFieldsRequest | PlainMessage<GetDataFieldsRequest> | undefined, b: GetDataFieldsRequest | PlainMessage<GetDataFieldsRequest> | undefined): boolean {
    return proto3.util.equals(GetDataFieldsRequest, a, b);
  }
}

/**
 * @generated from message search_engine.Industry
 */
export class Industry extends Message<Industry> {
  /**
   * @generated from field: repeated string industries = 1;
   */
  industries: string[] = [];

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Industry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Industry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "industries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Industry {
    return new Industry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Industry {
    return new Industry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Industry {
    return new Industry().fromJsonString(jsonString, options);
  }

  static equals(a: Industry | PlainMessage<Industry> | undefined, b: Industry | PlainMessage<Industry> | undefined): boolean {
    return proto3.util.equals(Industry, a, b);
  }
}

/**
 * @generated from message search_engine.TechnologyApp
 */
export class TechnologyApp extends Message<TechnologyApp> {
  /**
   * @generated from field: string appName = 1;
   */
  appName = "";

  /**
   * @generated from field: repeated int32 cats = 2;
   */
  cats: number[] = [];

  /**
   * @generated from field: string icon = 3;
   */
  icon = "";

  /**
   * @generated from field: string website = 4;
   */
  website = "";

  constructor(data?: PartialMessage<TechnologyApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.TechnologyApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cats", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 3, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TechnologyApp {
    return new TechnologyApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TechnologyApp {
    return new TechnologyApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TechnologyApp {
    return new TechnologyApp().fromJsonString(jsonString, options);
  }

  static equals(a: TechnologyApp | PlainMessage<TechnologyApp> | undefined, b: TechnologyApp | PlainMessage<TechnologyApp> | undefined): boolean {
    return proto3.util.equals(TechnologyApp, a, b);
  }
}

/**
 * @generated from message search_engine.TechnologyCategory
 */
export class TechnologyCategory extends Message<TechnologyCategory> {
  /**
   * @generated from field: string catId = 1;
   */
  catId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<TechnologyCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.TechnologyCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TechnologyCategory {
    return new TechnologyCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TechnologyCategory {
    return new TechnologyCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TechnologyCategory {
    return new TechnologyCategory().fromJsonString(jsonString, options);
  }

  static equals(a: TechnologyCategory | PlainMessage<TechnologyCategory> | undefined, b: TechnologyCategory | PlainMessage<TechnologyCategory> | undefined): boolean {
    return proto3.util.equals(TechnologyCategory, a, b);
  }
}

/**
 * @generated from message search_engine.Technologies
 */
export class Technologies extends Message<Technologies> {
  /**
   * @generated from field: repeated search_engine.TechnologyApp apps = 1;
   */
  apps: TechnologyApp[] = [];

  /**
   * @generated from field: repeated search_engine.TechnologyCategory categories = 2;
   */
  categories: TechnologyCategory[] = [];

  constructor(data?: PartialMessage<Technologies>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Technologies";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: TechnologyApp, repeated: true },
    { no: 2, name: "categories", kind: "message", T: TechnologyCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Technologies {
    return new Technologies().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Technologies {
    return new Technologies().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Technologies {
    return new Technologies().fromJsonString(jsonString, options);
  }

  static equals(a: Technologies | PlainMessage<Technologies> | undefined, b: Technologies | PlainMessage<Technologies> | undefined): boolean {
    return proto3.util.equals(Technologies, a, b);
  }
}

/**
 * @generated from message search_engine.GetDataFieldsResponse
 */
export class GetDataFieldsResponse extends Message<GetDataFieldsResponse> {
  /**
   * @generated from field: repeated search_engine.Industry industries = 1;
   */
  industries: Industry[] = [];

  /**
   * @generated from field: search_engine.Technologies techs = 2;
   */
  techs?: Technologies;

  constructor(data?: PartialMessage<GetDataFieldsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.GetDataFieldsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "industries", kind: "message", T: Industry, repeated: true },
    { no: 2, name: "techs", kind: "message", T: Technologies },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataFieldsResponse {
    return new GetDataFieldsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataFieldsResponse {
    return new GetDataFieldsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataFieldsResponse {
    return new GetDataFieldsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDataFieldsResponse | PlainMessage<GetDataFieldsResponse> | undefined, b: GetDataFieldsResponse | PlainMessage<GetDataFieldsResponse> | undefined): boolean {
    return proto3.util.equals(GetDataFieldsResponse, a, b);
  }
}

/**
 * @generated from message search_engine.DeleteOneCompanyRequest
 */
export class DeleteOneCompanyRequest extends Message<DeleteOneCompanyRequest> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  constructor(data?: PartialMessage<DeleteOneCompanyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.DeleteOneCompanyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOneCompanyRequest {
    return new DeleteOneCompanyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOneCompanyRequest {
    return new DeleteOneCompanyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOneCompanyRequest {
    return new DeleteOneCompanyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOneCompanyRequest | PlainMessage<DeleteOneCompanyRequest> | undefined, b: DeleteOneCompanyRequest | PlainMessage<DeleteOneCompanyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOneCompanyRequest, a, b);
  }
}

/**
 * @generated from message search_engine.DeleteOneCompanyResponse
 */
export class DeleteOneCompanyResponse extends Message<DeleteOneCompanyResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<DeleteOneCompanyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.DeleteOneCompanyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOneCompanyResponse {
    return new DeleteOneCompanyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOneCompanyResponse {
    return new DeleteOneCompanyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOneCompanyResponse {
    return new DeleteOneCompanyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOneCompanyResponse | PlainMessage<DeleteOneCompanyResponse> | undefined, b: DeleteOneCompanyResponse | PlainMessage<DeleteOneCompanyResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOneCompanyResponse, a, b);
  }
}

/**
 * @generated from message search_engine.MigrateOneCompanyRequest
 */
export class MigrateOneCompanyRequest extends Message<MigrateOneCompanyRequest> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  constructor(data?: PartialMessage<MigrateOneCompanyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MigrateOneCompanyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateOneCompanyRequest {
    return new MigrateOneCompanyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateOneCompanyRequest {
    return new MigrateOneCompanyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateOneCompanyRequest {
    return new MigrateOneCompanyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateOneCompanyRequest | PlainMessage<MigrateOneCompanyRequest> | undefined, b: MigrateOneCompanyRequest | PlainMessage<MigrateOneCompanyRequest> | undefined): boolean {
    return proto3.util.equals(MigrateOneCompanyRequest, a, b);
  }
}

/**
 * @generated from message search_engine.MigrateOneCompanyResponse
 */
export class MigrateOneCompanyResponse extends Message<MigrateOneCompanyResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<MigrateOneCompanyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MigrateOneCompanyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateOneCompanyResponse {
    return new MigrateOneCompanyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateOneCompanyResponse {
    return new MigrateOneCompanyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateOneCompanyResponse {
    return new MigrateOneCompanyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateOneCompanyResponse | PlainMessage<MigrateOneCompanyResponse> | undefined, b: MigrateOneCompanyResponse | PlainMessage<MigrateOneCompanyResponse> | undefined): boolean {
    return proto3.util.equals(MigrateOneCompanyResponse, a, b);
  }
}

/**
 * @generated from message search_engine.GetPeopleEmailMetadataParameters
 */
export class GetPeopleEmailMetadataParameters extends Message<GetPeopleEmailMetadataParameters> {
  /**
   * @generated from field: repeated string peopleIds = 1;
   */
  peopleIds: string[] = [];

  constructor(data?: PartialMessage<GetPeopleEmailMetadataParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.GetPeopleEmailMetadataParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peopleIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPeopleEmailMetadataParameters {
    return new GetPeopleEmailMetadataParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPeopleEmailMetadataParameters {
    return new GetPeopleEmailMetadataParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPeopleEmailMetadataParameters {
    return new GetPeopleEmailMetadataParameters().fromJsonString(jsonString, options);
  }

  static equals(a: GetPeopleEmailMetadataParameters | PlainMessage<GetPeopleEmailMetadataParameters> | undefined, b: GetPeopleEmailMetadataParameters | PlainMessage<GetPeopleEmailMetadataParameters> | undefined): boolean {
    return proto3.util.equals(GetPeopleEmailMetadataParameters, a, b);
  }
}

/**
 * @generated from message search_engine.PeopleEmailMetadata
 */
export class PeopleEmailMetadata extends Message<PeopleEmailMetadata> {
  /**
   * in the future we can add more general metadata that could be useful for
   * email verification, like: company size external detected domain etc...
   *
   * @generated from field: string domain = 1;
   */
  domain = "";

  constructor(data?: PartialMessage<PeopleEmailMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.PeopleEmailMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeopleEmailMetadata {
    return new PeopleEmailMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeopleEmailMetadata {
    return new PeopleEmailMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeopleEmailMetadata {
    return new PeopleEmailMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: PeopleEmailMetadata | PlainMessage<PeopleEmailMetadata> | undefined, b: PeopleEmailMetadata | PlainMessage<PeopleEmailMetadata> | undefined): boolean {
    return proto3.util.equals(PeopleEmailMetadata, a, b);
  }
}

/**
 * @generated from message search_engine.GetPeopleEmailMetadataResponse
 */
export class GetPeopleEmailMetadataResponse extends Message<GetPeopleEmailMetadataResponse> {
  /**
   * @generated from field: map<string, search_engine.PeopleEmailMetadata> people = 1;
   */
  people: { [key: string]: PeopleEmailMetadata } = {};

  constructor(data?: PartialMessage<GetPeopleEmailMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.GetPeopleEmailMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "people", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: PeopleEmailMetadata} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPeopleEmailMetadataResponse {
    return new GetPeopleEmailMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPeopleEmailMetadataResponse {
    return new GetPeopleEmailMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPeopleEmailMetadataResponse {
    return new GetPeopleEmailMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPeopleEmailMetadataResponse | PlainMessage<GetPeopleEmailMetadataResponse> | undefined, b: GetPeopleEmailMetadataResponse | PlainMessage<GetPeopleEmailMetadataResponse> | undefined): boolean {
    return proto3.util.equals(GetPeopleEmailMetadataResponse, a, b);
  }
}

/**
 * @generated from message search_engine.DepartmentSizesRequest
 */
export class DepartmentSizesRequest extends Message<DepartmentSizesRequest> {
  /**
   * @generated from field: string index = 1;
   */
  index = "";

  constructor(data?: PartialMessage<DepartmentSizesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.DepartmentSizesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DepartmentSizesRequest {
    return new DepartmentSizesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DepartmentSizesRequest {
    return new DepartmentSizesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DepartmentSizesRequest {
    return new DepartmentSizesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DepartmentSizesRequest | PlainMessage<DepartmentSizesRequest> | undefined, b: DepartmentSizesRequest | PlainMessage<DepartmentSizesRequest> | undefined): boolean {
    return proto3.util.equals(DepartmentSizesRequest, a, b);
  }
}

/**
 * @generated from message search_engine.DepartmentSizesResponse
 */
export class DepartmentSizesResponse extends Message<DepartmentSizesResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<DepartmentSizesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.DepartmentSizesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DepartmentSizesResponse {
    return new DepartmentSizesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DepartmentSizesResponse {
    return new DepartmentSizesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DepartmentSizesResponse {
    return new DepartmentSizesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DepartmentSizesResponse | PlainMessage<DepartmentSizesResponse> | undefined, b: DepartmentSizesResponse | PlainMessage<DepartmentSizesResponse> | undefined): boolean {
    return proto3.util.equals(DepartmentSizesResponse, a, b);
  }
}

/**
 * @generated from message search_engine.MatchUsersRequest
 */
export class MatchUsersRequest extends Message<MatchUsersRequest> {
  /**
   * @generated from field: repeated string userIds = 1;
   */
  userIds: string[] = [];

  constructor(data?: PartialMessage<MatchUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MatchUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchUsersRequest {
    return new MatchUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchUsersRequest {
    return new MatchUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchUsersRequest {
    return new MatchUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MatchUsersRequest | PlainMessage<MatchUsersRequest> | undefined, b: MatchUsersRequest | PlainMessage<MatchUsersRequest> | undefined): boolean {
    return proto3.util.equals(MatchUsersRequest, a, b);
  }
}

/**
 * @generated from message search_engine.MatchUsersResponse
 */
export class MatchUsersResponse extends Message<MatchUsersResponse> {
  /**
   * @generated from field: map<string, string> matchedIds = 1;
   */
  matchedIds: { [key: string]: string } = {};

  constructor(data?: PartialMessage<MatchUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MatchUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "matchedIds", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchUsersResponse {
    return new MatchUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchUsersResponse {
    return new MatchUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchUsersResponse {
    return new MatchUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MatchUsersResponse | PlainMessage<MatchUsersResponse> | undefined, b: MatchUsersResponse | PlainMessage<MatchUsersResponse> | undefined): boolean {
    return proto3.util.equals(MatchUsersResponse, a, b);
  }
}

/**
 * @generated from message search_engine.PeopleCountRequest
 */
export class PeopleCountRequest extends Message<PeopleCountRequest> {
  /**
   * @generated from field: string index = 1;
   */
  index = "";

  /**
   * @generated from field: optional int32 refreshFromDaysAgo = 2;
   */
  refreshFromDaysAgo?: number;

  /**
   * @generated from field: bool checkForZero = 3;
   */
  checkForZero = false;

  constructor(data?: PartialMessage<PeopleCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.PeopleCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refreshFromDaysAgo", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "checkForZero", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeopleCountRequest {
    return new PeopleCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeopleCountRequest {
    return new PeopleCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeopleCountRequest {
    return new PeopleCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PeopleCountRequest | PlainMessage<PeopleCountRequest> | undefined, b: PeopleCountRequest | PlainMessage<PeopleCountRequest> | undefined): boolean {
    return proto3.util.equals(PeopleCountRequest, a, b);
  }
}

/**
 * @generated from message search_engine.PeopleCountResponse
 */
export class PeopleCountResponse extends Message<PeopleCountResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<PeopleCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.PeopleCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeopleCountResponse {
    return new PeopleCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeopleCountResponse {
    return new PeopleCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeopleCountResponse {
    return new PeopleCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PeopleCountResponse | PlainMessage<PeopleCountResponse> | undefined, b: PeopleCountResponse | PlainMessage<PeopleCountResponse> | undefined): boolean {
    return proto3.util.equals(PeopleCountResponse, a, b);
  }
}

/**
 * @generated from message search_engine.JobTitleCountRequest
 */
export class JobTitleCountRequest extends Message<JobTitleCountRequest> {
  /**
   * @generated from field: string after = 1;
   */
  after = "";

  constructor(data?: PartialMessage<JobTitleCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.JobTitleCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "after", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobTitleCountRequest {
    return new JobTitleCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobTitleCountRequest {
    return new JobTitleCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobTitleCountRequest {
    return new JobTitleCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JobTitleCountRequest | PlainMessage<JobTitleCountRequest> | undefined, b: JobTitleCountRequest | PlainMessage<JobTitleCountRequest> | undefined): boolean {
    return proto3.util.equals(JobTitleCountRequest, a, b);
  }
}

/**
 * @generated from message search_engine.JobTitleCountResponse
 */
export class JobTitleCountResponse extends Message<JobTitleCountResponse> {
  /**
   * @generated from field: string after = 1;
   */
  after = "";

  /**
   * @generated from field: repeated search_engine.JobTitleCount jobTitleCounts = 2;
   */
  jobTitleCounts: JobTitleCount[] = [];

  constructor(data?: PartialMessage<JobTitleCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.JobTitleCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "after", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "jobTitleCounts", kind: "message", T: JobTitleCount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobTitleCountResponse {
    return new JobTitleCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobTitleCountResponse {
    return new JobTitleCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobTitleCountResponse {
    return new JobTitleCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JobTitleCountResponse | PlainMessage<JobTitleCountResponse> | undefined, b: JobTitleCountResponse | PlainMessage<JobTitleCountResponse> | undefined): boolean {
    return proto3.util.equals(JobTitleCountResponse, a, b);
  }
}

/**
 * @generated from message search_engine.JobTitleCount
 */
export class JobTitleCount extends Message<JobTitleCount> {
  /**
   * @generated from field: string jobTitle = 1;
   */
  jobTitle = "";

  /**
   * @generated from field: int32 count = 2;
   */
  count = 0;

  constructor(data?: PartialMessage<JobTitleCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.JobTitleCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jobTitle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobTitleCount {
    return new JobTitleCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobTitleCount {
    return new JobTitleCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobTitleCount {
    return new JobTitleCount().fromJsonString(jsonString, options);
  }

  static equals(a: JobTitleCount | PlainMessage<JobTitleCount> | undefined, b: JobTitleCount | PlainMessage<JobTitleCount> | undefined): boolean {
    return proto3.util.equals(JobTitleCount, a, b);
  }
}

/**
 * @generated from message search_engine.RecrawlSearchResponse
 */
export class RecrawlSearchResponse extends Message<RecrawlSearchResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<RecrawlSearchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.RecrawlSearchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecrawlSearchResponse {
    return new RecrawlSearchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecrawlSearchResponse {
    return new RecrawlSearchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecrawlSearchResponse {
    return new RecrawlSearchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RecrawlSearchResponse | PlainMessage<RecrawlSearchResponse> | undefined, b: RecrawlSearchResponse | PlainMessage<RecrawlSearchResponse> | undefined): boolean {
    return proto3.util.equals(RecrawlSearchResponse, a, b);
  }
}

/**
 * @generated from message search_engine.CreatePointInTimeRequest
 */
export class CreatePointInTimeRequest extends Message<CreatePointInTimeRequest> {
  /**
   * @generated from field: string keepAlive = 1;
   */
  keepAlive = "";

  /**
   * @generated from field: search_engine.Collection collection = 2;
   */
  collection = Collection.Companies;

  constructor(data?: PartialMessage<CreatePointInTimeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.CreatePointInTimeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keepAlive", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collection", kind: "enum", T: proto3.getEnumType(Collection) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePointInTimeRequest {
    return new CreatePointInTimeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePointInTimeRequest {
    return new CreatePointInTimeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePointInTimeRequest {
    return new CreatePointInTimeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePointInTimeRequest | PlainMessage<CreatePointInTimeRequest> | undefined, b: CreatePointInTimeRequest | PlainMessage<CreatePointInTimeRequest> | undefined): boolean {
    return proto3.util.equals(CreatePointInTimeRequest, a, b);
  }
}

/**
 * @generated from message search_engine.CreatePointInTimeResponse
 */
export class CreatePointInTimeResponse extends Message<CreatePointInTimeResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CreatePointInTimeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.CreatePointInTimeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePointInTimeResponse {
    return new CreatePointInTimeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePointInTimeResponse {
    return new CreatePointInTimeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePointInTimeResponse {
    return new CreatePointInTimeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePointInTimeResponse | PlainMessage<CreatePointInTimeResponse> | undefined, b: CreatePointInTimeResponse | PlainMessage<CreatePointInTimeResponse> | undefined): boolean {
    return proto3.util.equals(CreatePointInTimeResponse, a, b);
  }
}

/**
 * @generated from message search_engine.UpdatePeopleDataRequest
 */
export class UpdatePeopleDataRequest extends Message<UpdatePeopleDataRequest> {
  /**
   * @generated from field: string index = 1;
   */
  index = "";

  /**
   * @generated from field: repeated search_engine.PersonUpdate updates = 2;
   */
  updates: PersonUpdate[] = [];

  constructor(data?: PartialMessage<UpdatePeopleDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.UpdatePeopleDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updates", kind: "message", T: PersonUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePeopleDataRequest {
    return new UpdatePeopleDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePeopleDataRequest {
    return new UpdatePeopleDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePeopleDataRequest {
    return new UpdatePeopleDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePeopleDataRequest | PlainMessage<UpdatePeopleDataRequest> | undefined, b: UpdatePeopleDataRequest | PlainMessage<UpdatePeopleDataRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePeopleDataRequest, a, b);
  }
}

/**
 * @generated from message search_engine.PersonUpdate
 */
export class PersonUpdate extends Message<PersonUpdate> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated float jobTitleVector = 2;
   */
  jobTitleVector: number[] = [];

  /**
   * @generated from field: string routing = 3;
   */
  routing = "";

  /**
   * @generated from field: repeated string seniorities = 4;
   */
  seniorities: string[] = [];

  /**
   * @generated from field: repeated string departments = 5;
   */
  departments: string[] = [];

  /**
   * @generated from field: optional string jobTitleCleaned = 6;
   */
  jobTitleCleaned?: string;

  /**
   * @generated from field: optional string jobTitleTranslated = 7;
   */
  jobTitleTranslated?: string;

  /**
   * @generated from field: optional search_engine.Email email = 8;
   */
  email?: Email;

  constructor(data?: PartialMessage<PersonUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.PersonUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "jobTitleVector", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 3, name: "routing", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "seniorities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "departments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "jobTitleCleaned", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "jobTitleTranslated", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "email", kind: "message", T: Email, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PersonUpdate {
    return new PersonUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PersonUpdate {
    return new PersonUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PersonUpdate {
    return new PersonUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: PersonUpdate | PlainMessage<PersonUpdate> | undefined, b: PersonUpdate | PlainMessage<PersonUpdate> | undefined): boolean {
    return proto3.util.equals(PersonUpdate, a, b);
  }
}

/**
 * @generated from message search_engine.UpdatePeopleDataResponse
 */
export class UpdatePeopleDataResponse extends Message<UpdatePeopleDataResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<UpdatePeopleDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.UpdatePeopleDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePeopleDataResponse {
    return new UpdatePeopleDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePeopleDataResponse {
    return new UpdatePeopleDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePeopleDataResponse {
    return new UpdatePeopleDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePeopleDataResponse | PlainMessage<UpdatePeopleDataResponse> | undefined, b: UpdatePeopleDataResponse | PlainMessage<UpdatePeopleDataResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePeopleDataResponse, a, b);
  }
}

/**
 * @generated from message search_engine.VerifyEmailRequest
 */
export class VerifyEmailRequest extends Message<VerifyEmailRequest> {
  /**
   * @generated from field: string personId = 1;
   */
  personId = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  constructor(data?: PartialMessage<VerifyEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.VerifyEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "personId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyEmailRequest {
    return new VerifyEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyEmailRequest {
    return new VerifyEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyEmailRequest {
    return new VerifyEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyEmailRequest | PlainMessage<VerifyEmailRequest> | undefined, b: VerifyEmailRequest | PlainMessage<VerifyEmailRequest> | undefined): boolean {
    return proto3.util.equals(VerifyEmailRequest, a, b);
  }
}

/**
 * @generated from message search_engine.VerifyEmailsRequest
 */
export class VerifyEmailsRequest extends Message<VerifyEmailsRequest> {
  /**
   * @generated from field: repeated search_engine.VerifyEmailRequest peopleData = 1;
   */
  peopleData: VerifyEmailRequest[] = [];

  constructor(data?: PartialMessage<VerifyEmailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.VerifyEmailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peopleData", kind: "message", T: VerifyEmailRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyEmailsRequest {
    return new VerifyEmailsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyEmailsRequest {
    return new VerifyEmailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyEmailsRequest {
    return new VerifyEmailsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyEmailsRequest | PlainMessage<VerifyEmailsRequest> | undefined, b: VerifyEmailsRequest | PlainMessage<VerifyEmailsRequest> | undefined): boolean {
    return proto3.util.equals(VerifyEmailsRequest, a, b);
  }
}

/**
 * @generated from message search_engine.VerifyEmailsResponse
 */
export class VerifyEmailsResponse extends Message<VerifyEmailsResponse> {
  /**
   * @generated from field: map<string, string> emails = 1;
   */
  emails: { [key: string]: string } = {};

  constructor(data?: PartialMessage<VerifyEmailsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.VerifyEmailsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "emails", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyEmailsResponse {
    return new VerifyEmailsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyEmailsResponse {
    return new VerifyEmailsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyEmailsResponse {
    return new VerifyEmailsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyEmailsResponse | PlainMessage<VerifyEmailsResponse> | undefined, b: VerifyEmailsResponse | PlainMessage<VerifyEmailsResponse> | undefined): boolean {
    return proto3.util.equals(VerifyEmailsResponse, a, b);
  }
}

/**
 * @generated from message search_engine.GetCompanyRequest
 */
export class GetCompanyRequest extends Message<GetCompanyRequest> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: repeated string sources = 2;
   */
  sources: string[] = [];

  /**
   * @generated from field: bool force_crawl = 3;
   */
  forceCrawl = false;

  constructor(data?: PartialMessage<GetCompanyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.GetCompanyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "force_crawl", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompanyRequest {
    return new GetCompanyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompanyRequest {
    return new GetCompanyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompanyRequest {
    return new GetCompanyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompanyRequest | PlainMessage<GetCompanyRequest> | undefined, b: GetCompanyRequest | PlainMessage<GetCompanyRequest> | undefined): boolean {
    return proto3.util.equals(GetCompanyRequest, a, b);
  }
}

/**
 * @generated from message search_engine.GetCompanyResponse
 */
export class GetCompanyResponse extends Message<GetCompanyResponse> {
  /**
   * @generated from field: search_engine.Company company = 1;
   */
  company?: Company;

  /**
   * @generated from field: optional search_engine.Error error = 2;
   */
  error?: Error;

  constructor(data?: PartialMessage<GetCompanyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.GetCompanyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "company", kind: "message", T: Company },
    { no: 2, name: "error", kind: "message", T: Error, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompanyResponse {
    return new GetCompanyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompanyResponse {
    return new GetCompanyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompanyResponse {
    return new GetCompanyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompanyResponse | PlainMessage<GetCompanyResponse> | undefined, b: GetCompanyResponse | PlainMessage<GetCompanyResponse> | undefined): boolean {
    return proto3.util.equals(GetCompanyResponse, a, b);
  }
}

/**
 * @generated from message search_engine.SearchPeopleParameters
 */
export class SearchPeopleParameters extends Message<SearchPeopleParameters> {
  /**
   * @generated from field: optional int32 size = 1;
   */
  size?: number;

  /**
   * @generated from field: bool trackTotalHits = 2;
   */
  trackTotalHits = false;

  /**
   * @generated from field: repeated string sources = 3;
   */
  sources: string[] = [];

  /**
   * @generated from field: string searchAfter = 4;
   */
  searchAfter = "";

  /**
   * @generated from field: int32 skip = 5;
   */
  skip = 0;

  /**
   * @generated from field: repeated search_engine.Sorting sort = 6;
   */
  sort: Sorting[] = [];

  /**
   * @generated from field: optional search_engine.CompaniesFilters companiesFilters = 10;
   */
  companiesFilters?: CompaniesFilters;

  /**
   * @generated from field: optional search_engine.PeopleFilters peopleFilters = 11;
   */
  peopleFilters?: PeopleFilters;

  /**
   * @generated from field: optional search_engine.PointInTime pointInTime = 17;
   */
  pointInTime?: PointInTime;

  constructor(data?: PartialMessage<SearchPeopleParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.SearchPeopleParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "trackTotalHits", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "searchAfter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "skip", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "sort", kind: "message", T: Sorting, repeated: true },
    { no: 10, name: "companiesFilters", kind: "message", T: CompaniesFilters, opt: true },
    { no: 11, name: "peopleFilters", kind: "message", T: PeopleFilters, opt: true },
    { no: 17, name: "pointInTime", kind: "message", T: PointInTime, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchPeopleParameters {
    return new SearchPeopleParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchPeopleParameters {
    return new SearchPeopleParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchPeopleParameters {
    return new SearchPeopleParameters().fromJsonString(jsonString, options);
  }

  static equals(a: SearchPeopleParameters | PlainMessage<SearchPeopleParameters> | undefined, b: SearchPeopleParameters | PlainMessage<SearchPeopleParameters> | undefined): boolean {
    return proto3.util.equals(SearchPeopleParameters, a, b);
  }
}

/**
 * @generated from message search_engine.SearchPeopleResponse
 */
export class SearchPeopleResponse extends Message<SearchPeopleResponse> {
  /**
   * @generated from field: repeated search_engine.SearchPeopleResult people = 1;
   */
  people: SearchPeopleResult[] = [];

  /**
   * @generated from field: int32 total = 2;
   */
  total = 0;

  /**
   * @generated from field: search_engine.Error error = 3;
   */
  error?: Error;

  /**
   * @generated from field: string searchAfter = 4;
   */
  searchAfter = "";

  constructor(data?: PartialMessage<SearchPeopleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.SearchPeopleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "people", kind: "message", T: SearchPeopleResult, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "error", kind: "message", T: Error },
    { no: 4, name: "searchAfter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchPeopleResponse {
    return new SearchPeopleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchPeopleResponse {
    return new SearchPeopleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchPeopleResponse {
    return new SearchPeopleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchPeopleResponse | PlainMessage<SearchPeopleResponse> | undefined, b: SearchPeopleResponse | PlainMessage<SearchPeopleResponse> | undefined): boolean {
    return proto3.util.equals(SearchPeopleResponse, a, b);
  }
}

/**
 * @generated from message search_engine.SearchPeopleResult
 */
export class SearchPeopleResult extends Message<SearchPeopleResult> {
  /**
   * @generated from field: float score = 1;
   */
  score = 0;

  /**
   * @generated from field: search_engine.Person person = 2;
   */
  person?: Person;

  constructor(data?: PartialMessage<SearchPeopleResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.SearchPeopleResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "person", kind: "message", T: Person },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchPeopleResult {
    return new SearchPeopleResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchPeopleResult {
    return new SearchPeopleResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchPeopleResult {
    return new SearchPeopleResult().fromJsonString(jsonString, options);
  }

  static equals(a: SearchPeopleResult | PlainMessage<SearchPeopleResult> | undefined, b: SearchPeopleResult | PlainMessage<SearchPeopleResult> | undefined): boolean {
    return proto3.util.equals(SearchPeopleResult, a, b);
  }
}

/**
 * @generated from message search_engine.SearchCompaniesParameters
 */
export class SearchCompaniesParameters extends Message<SearchCompaniesParameters> {
  /**
   * @generated from field: optional int32 size = 1;
   */
  size?: number;

  /**
   * @generated from field: bool trackTotalHits = 2;
   */
  trackTotalHits = false;

  /**
   * @generated from field: repeated string sources = 3;
   */
  sources: string[] = [];

  /**
   * @generated from field: string searchAfter = 4;
   */
  searchAfter = "";

  /**
   * @generated from field: int32 skip = 5;
   */
  skip = 0;

  /**
   * @generated from field: repeated search_engine.Sorting sort = 6;
   */
  sort: Sorting[] = [];

  /**
   * @generated from field: search_engine.CompaniesFilters companiesFilters = 7;
   */
  companiesFilters?: CompaniesFilters;

  /**
   * @generated from field: optional search_engine.PeopleFilters peopleFilters = 8;
   */
  peopleFilters?: PeopleFilters;

  /**
   * @generated from field: optional search_engine.PointInTime pointInTime = 9;
   */
  pointInTime?: PointInTime;

  constructor(data?: PartialMessage<SearchCompaniesParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.SearchCompaniesParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "trackTotalHits", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "searchAfter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "skip", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "sort", kind: "message", T: Sorting, repeated: true },
    { no: 7, name: "companiesFilters", kind: "message", T: CompaniesFilters },
    { no: 8, name: "peopleFilters", kind: "message", T: PeopleFilters, opt: true },
    { no: 9, name: "pointInTime", kind: "message", T: PointInTime, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchCompaniesParameters {
    return new SearchCompaniesParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchCompaniesParameters {
    return new SearchCompaniesParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchCompaniesParameters {
    return new SearchCompaniesParameters().fromJsonString(jsonString, options);
  }

  static equals(a: SearchCompaniesParameters | PlainMessage<SearchCompaniesParameters> | undefined, b: SearchCompaniesParameters | PlainMessage<SearchCompaniesParameters> | undefined): boolean {
    return proto3.util.equals(SearchCompaniesParameters, a, b);
  }
}

/**
 * @generated from message search_engine.PointInTime
 */
export class PointInTime extends Message<PointInTime> {
  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: int32 index = 1;
   */
  index = 0;

  /**
   * @generated from field: int32 max = 2;
   */
  max = 0;

  constructor(data?: PartialMessage<PointInTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.PointInTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PointInTime {
    return new PointInTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PointInTime {
    return new PointInTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PointInTime {
    return new PointInTime().fromJsonString(jsonString, options);
  }

  static equals(a: PointInTime | PlainMessage<PointInTime> | undefined, b: PointInTime | PlainMessage<PointInTime> | undefined): boolean {
    return proto3.util.equals(PointInTime, a, b);
  }
}

/**
 * @generated from message search_engine.Sorting
 */
export class Sorting extends Message<Sorting> {
  /**
   * @generated from field: string field = 1;
   */
  field = "";

  /**
   * @generated from field: bool ascending = 2;
   */
  ascending = false;

  constructor(data?: PartialMessage<Sorting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Sorting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sorting {
    return new Sorting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sorting {
    return new Sorting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sorting {
    return new Sorting().fromJsonString(jsonString, options);
  }

  static equals(a: Sorting | PlainMessage<Sorting> | undefined, b: Sorting | PlainMessage<Sorting> | undefined): boolean {
    return proto3.util.equals(Sorting, a, b);
  }
}

/**
 * @generated from message search_engine.SearchCompanyResult
 */
export class SearchCompanyResult extends Message<SearchCompanyResult> {
  /**
   * @generated from field: float score = 1;
   */
  score = 0;

  /**
   * @generated from field: search_engine.Company company = 2;
   */
  company?: Company;

  constructor(data?: PartialMessage<SearchCompanyResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.SearchCompanyResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "company", kind: "message", T: Company },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchCompanyResult {
    return new SearchCompanyResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchCompanyResult {
    return new SearchCompanyResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchCompanyResult {
    return new SearchCompanyResult().fromJsonString(jsonString, options);
  }

  static equals(a: SearchCompanyResult | PlainMessage<SearchCompanyResult> | undefined, b: SearchCompanyResult | PlainMessage<SearchCompanyResult> | undefined): boolean {
    return proto3.util.equals(SearchCompanyResult, a, b);
  }
}

/**
 * @generated from message search_engine.SearchCompaniesResponse
 */
export class SearchCompaniesResponse extends Message<SearchCompaniesResponse> {
  /**
   * @generated from field: string applicationLink = 1;
   */
  applicationLink = "";

  /**
   * @generated from field: int32 total = 2;
   */
  total = 0;

  /**
   * @generated from field: repeated search_engine.Company searchedCompanies = 3;
   */
  searchedCompanies: Company[] = [];

  /**
   * @generated from field: repeated search_engine.SearchCompanyResult companies = 4;
   */
  companies: SearchCompanyResult[] = [];

  /**
   * @generated from field: string searchAfter = 5;
   */
  searchAfter = "";

  /**
   * @generated from field: search_engine.Error error = 6;
   */
  error?: Error;

  constructor(data?: PartialMessage<SearchCompaniesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.SearchCompaniesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "applicationLink", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "searchedCompanies", kind: "message", T: Company, repeated: true },
    { no: 4, name: "companies", kind: "message", T: SearchCompanyResult, repeated: true },
    { no: 5, name: "searchAfter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "error", kind: "message", T: Error },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchCompaniesResponse {
    return new SearchCompaniesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchCompaniesResponse {
    return new SearchCompaniesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchCompaniesResponse {
    return new SearchCompaniesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchCompaniesResponse | PlainMessage<SearchCompaniesResponse> | undefined, b: SearchCompaniesResponse | PlainMessage<SearchCompaniesResponse> | undefined): boolean {
    return proto3.util.equals(SearchCompaniesResponse, a, b);
  }
}

/**
 * @generated from message search_engine.Error
 */
export class Error extends Message<Error> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * @generated from field: string crawledAt = 3;
   */
  crawledAt = "";

  /**
   * @generated from field: string updatedAt = 4;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "crawledAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "updatedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

/**
 * @generated from message search_engine.GetCompaniesDistributionParameters
 */
export class GetCompaniesDistributionParameters extends Message<GetCompaniesDistributionParameters> {
  /**
   * @generated from field: string field = 1;
   */
  field = "";

  /**
   * @generated from field: int32 count = 2;
   */
  count = 0;

  /**
   * @generated from field: search_engine.CompaniesFilters filters = 3;
   */
  filters?: CompaniesFilters;

  constructor(data?: PartialMessage<GetCompaniesDistributionParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.GetCompaniesDistributionParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "filters", kind: "message", T: CompaniesFilters },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompaniesDistributionParameters {
    return new GetCompaniesDistributionParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompaniesDistributionParameters {
    return new GetCompaniesDistributionParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompaniesDistributionParameters {
    return new GetCompaniesDistributionParameters().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompaniesDistributionParameters | PlainMessage<GetCompaniesDistributionParameters> | undefined, b: GetCompaniesDistributionParameters | PlainMessage<GetCompaniesDistributionParameters> | undefined): boolean {
    return proto3.util.equals(GetCompaniesDistributionParameters, a, b);
  }
}

/**
 * @generated from message search_engine.GetCompaniesDistributionResponse
 */
export class GetCompaniesDistributionResponse extends Message<GetCompaniesDistributionResponse> {
  /**
   * @generated from field: repeated search_engine.CompaniesDistributionField fields = 1;
   */
  fields: CompaniesDistributionField[] = [];

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<GetCompaniesDistributionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.GetCompaniesDistributionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "message", T: CompaniesDistributionField, repeated: true },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompaniesDistributionResponse {
    return new GetCompaniesDistributionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompaniesDistributionResponse {
    return new GetCompaniesDistributionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompaniesDistributionResponse {
    return new GetCompaniesDistributionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompaniesDistributionResponse | PlainMessage<GetCompaniesDistributionResponse> | undefined, b: GetCompaniesDistributionResponse | PlainMessage<GetCompaniesDistributionResponse> | undefined): boolean {
    return proto3.util.equals(GetCompaniesDistributionResponse, a, b);
  }
}

/**
 * @generated from message search_engine.CompaniesDistributionField
 */
export class CompaniesDistributionField extends Message<CompaniesDistributionField> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int64 value = 2;
   */
  value = protoInt64.zero;

  constructor(data?: PartialMessage<CompaniesDistributionField>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.CompaniesDistributionField";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompaniesDistributionField {
    return new CompaniesDistributionField().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompaniesDistributionField {
    return new CompaniesDistributionField().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompaniesDistributionField {
    return new CompaniesDistributionField().fromJsonString(jsonString, options);
  }

  static equals(a: CompaniesDistributionField | PlainMessage<CompaniesDistributionField> | undefined, b: CompaniesDistributionField | PlainMessage<CompaniesDistributionField> | undefined): boolean {
    return proto3.util.equals(CompaniesDistributionField, a, b);
  }
}

/**
 * @generated from message search_engine.Boosts
 */
export class Boosts extends Message<Boosts> {
  /**
   * @generated from field: optional float nameCandidates = 1;
   */
  nameCandidates?: number;

  /**
   * @generated from field: optional float name = 2;
   */
  name?: number;

  /**
   * @generated from field: optional float companySizeA = 3;
   */
  companySizeA?: number;

  /**
   * @generated from field: optional float companySizeB = 4;
   */
  companySizeB?: number;

  /**
   * @generated from field: optional float companySizeC = 5;
   */
  companySizeC?: number;

  /**
   * @generated from field: optional float companySizeD = 6;
   */
  companySizeD?: number;

  /**
   * @generated from field: optional float companySizeE = 7;
   */
  companySizeE?: number;

  /**
   * @generated from field: optional float companySizeF = 8;
   */
  companySizeF?: number;

  /**
   * @generated from field: optional float companySizeG = 9;
   */
  companySizeG?: number;

  /**
   * @generated from field: optional float companySizeH = 10;
   */
  companySizeH?: number;

  /**
   * @generated from field: optional float companySizeI = 11;
   */
  companySizeI?: number;

  /**
   * @generated from field: optional float companySizeJ = 12;
   */
  companySizeJ?: number;

  /**
   * @generated from field: optional float companySizeK = 13;
   */
  companySizeK?: number;

  /**
   * @generated from field: optional float companySizeL = 14;
   */
  companySizeL?: number;

  /**
   * @generated from field: optional float fuzzyName = 15;
   */
  fuzzyName?: number;

  /**
   * @generated from field: optional float exactMatch = 16;
   */
  exactMatch?: number;

  /**
   * @generated from field: optional float webTraffic = 17;
   */
  webTraffic?: number;

  /**
   * @generated from field: optional float countries = 18;
   */
  countries?: number;

  /**
   * @generated from field: optional float primaryCountries = 19;
   */
  primaryCountries?: number;

  constructor(data?: PartialMessage<Boosts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Boosts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nameCandidates", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "companySizeA", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "companySizeB", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 5, name: "companySizeC", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 6, name: "companySizeD", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 7, name: "companySizeE", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 8, name: "companySizeF", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 9, name: "companySizeG", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 10, name: "companySizeH", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 11, name: "companySizeI", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 12, name: "companySizeJ", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 13, name: "companySizeK", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 14, name: "companySizeL", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 15, name: "fuzzyName", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 16, name: "exactMatch", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 17, name: "webTraffic", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 18, name: "countries", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 19, name: "primaryCountries", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Boosts {
    return new Boosts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Boosts {
    return new Boosts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Boosts {
    return new Boosts().fromJsonString(jsonString, options);
  }

  static equals(a: Boosts | PlainMessage<Boosts> | undefined, b: Boosts | PlainMessage<Boosts> | undefined): boolean {
    return proto3.util.equals(Boosts, a, b);
  }
}

/**
 * @generated from message search_engine.PrepareSearchCompaniesResponse
 */
export class PrepareSearchCompaniesResponse extends Message<PrepareSearchCompaniesResponse> {
  /**
   * @generated from field: string encodedBody = 1;
   */
  encodedBody = "";

  constructor(data?: PartialMessage<PrepareSearchCompaniesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.PrepareSearchCompaniesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encodedBody", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrepareSearchCompaniesResponse {
    return new PrepareSearchCompaniesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareSearchCompaniesResponse {
    return new PrepareSearchCompaniesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrepareSearchCompaniesResponse {
    return new PrepareSearchCompaniesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PrepareSearchCompaniesResponse | PlainMessage<PrepareSearchCompaniesResponse> | undefined, b: PrepareSearchCompaniesResponse | PlainMessage<PrepareSearchCompaniesResponse> | undefined): boolean {
    return proto3.util.equals(PrepareSearchCompaniesResponse, a, b);
  }
}

/**
 * @generated from message search_engine.AutoCompletionRequest
 */
export class AutoCompletionRequest extends Message<AutoCompletionRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string countryFilters = 2;
   */
  countryFilters: string[] = [];

  /**
   * @generated from field: repeated string countryBoosts = 3;
   */
  countryBoosts: string[] = [];

  /**
   * @generated from field: repeated string primaryCountryFilters = 4;
   */
  primaryCountryFilters: string[] = [];

  /**
   * @generated from field: repeated string primaryCountryBoosts = 5;
   */
  primaryCountryBoosts: string[] = [];

  /**
   * @generated from field: search_engine.Boosts boosts = 6;
   */
  boosts?: Boosts;

  /**
   * @generated from field: repeated string excludeDomains = 7;
   */
  excludeDomains: string[] = [];

  /**
   * @generated from field: repeated string includeDomains = 8;
   */
  includeDomains: string[] = [];

  constructor(data?: PartialMessage<AutoCompletionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.AutoCompletionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "countryFilters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "countryBoosts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "primaryCountryFilters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "primaryCountryBoosts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "boosts", kind: "message", T: Boosts },
    { no: 7, name: "excludeDomains", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "includeDomains", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoCompletionRequest {
    return new AutoCompletionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoCompletionRequest {
    return new AutoCompletionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoCompletionRequest {
    return new AutoCompletionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AutoCompletionRequest | PlainMessage<AutoCompletionRequest> | undefined, b: AutoCompletionRequest | PlainMessage<AutoCompletionRequest> | undefined): boolean {
    return proto3.util.equals(AutoCompletionRequest, a, b);
  }
}

/**
 * @generated from message search_engine.AutoCompletionResponse
 */
export class AutoCompletionResponse extends Message<AutoCompletionResponse> {
  /**
   * @generated from field: repeated search_engine.Company companies = 1;
   */
  companies: Company[] = [];

  constructor(data?: PartialMessage<AutoCompletionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.AutoCompletionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "companies", kind: "message", T: Company, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoCompletionResponse {
    return new AutoCompletionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoCompletionResponse {
    return new AutoCompletionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoCompletionResponse {
    return new AutoCompletionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AutoCompletionResponse | PlainMessage<AutoCompletionResponse> | undefined, b: AutoCompletionResponse | PlainMessage<AutoCompletionResponse> | undefined): boolean {
    return proto3.util.equals(AutoCompletionResponse, a, b);
  }
}

/**
 * @generated from message search_engine.KeywordMatchRequest
 */
export class KeywordMatchRequest extends Message<KeywordMatchRequest> {
  /**
   * @generated from field: string keyword = 1;
   */
  keyword = "";

  /**
   * @generated from field: optional int32 size = 2;
   */
  size?: number;

  constructor(data?: PartialMessage<KeywordMatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.KeywordMatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeywordMatchRequest {
    return new KeywordMatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeywordMatchRequest {
    return new KeywordMatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeywordMatchRequest {
    return new KeywordMatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: KeywordMatchRequest | PlainMessage<KeywordMatchRequest> | undefined, b: KeywordMatchRequest | PlainMessage<KeywordMatchRequest> | undefined): boolean {
    return proto3.util.equals(KeywordMatchRequest, a, b);
  }
}

/**
 * @generated from message search_engine.KeywordMatch
 */
export class KeywordMatch extends Message<KeywordMatch> {
  /**
   * @generated from field: string keyword = 1;
   */
  keyword = "";

  /**
   * @generated from field: int32 keywordId = 2;
   */
  keywordId = 0;

  /**
   * @generated from field: int32 score = 3;
   */
  score = 0;

  constructor(data?: PartialMessage<KeywordMatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.KeywordMatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "keywordId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeywordMatch {
    return new KeywordMatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeywordMatch {
    return new KeywordMatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeywordMatch {
    return new KeywordMatch().fromJsonString(jsonString, options);
  }

  static equals(a: KeywordMatch | PlainMessage<KeywordMatch> | undefined, b: KeywordMatch | PlainMessage<KeywordMatch> | undefined): boolean {
    return proto3.util.equals(KeywordMatch, a, b);
  }
}

/**
 * @generated from message search_engine.KeywordMatchResponse
 */
export class KeywordMatchResponse extends Message<KeywordMatchResponse> {
  /**
   * @generated from field: repeated search_engine.KeywordMatch keywordMatches = 1;
   */
  keywordMatches: KeywordMatch[] = [];

  constructor(data?: PartialMessage<KeywordMatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.KeywordMatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keywordMatches", kind: "message", T: KeywordMatch, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeywordMatchResponse {
    return new KeywordMatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeywordMatchResponse {
    return new KeywordMatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeywordMatchResponse {
    return new KeywordMatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: KeywordMatchResponse | PlainMessage<KeywordMatchResponse> | undefined, b: KeywordMatchResponse | PlainMessage<KeywordMatchResponse> | undefined): boolean {
    return proto3.util.equals(KeywordMatchResponse, a, b);
  }
}

/**
 * @generated from message search_engine.MigrateCompaniesParameters
 */
export class MigrateCompaniesParameters extends Message<MigrateCompaniesParameters> {
  /**
   * @generated from field: string toIndex = 1;
   */
  toIndex = "";

  /**
   * @generated from field: optional int32 refreshFromDaysAgo = 2;
   */
  refreshFromDaysAgo?: number;

  /**
   * @generated from field: optional string indexForPeopleCount = 3;
   */
  indexForPeopleCount?: string;

  /**
   * @generated from field: repeated string domains = 4;
   */
  domains: string[] = [];

  /**
   * @generated from field: optional bool skipPeopleCountAndDepartmentSizes = 5;
   */
  skipPeopleCountAndDepartmentSizes?: boolean;

  constructor(data?: PartialMessage<MigrateCompaniesParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MigrateCompaniesParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "toIndex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refreshFromDaysAgo", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "indexForPeopleCount", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "domains", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "skipPeopleCountAndDepartmentSizes", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateCompaniesParameters {
    return new MigrateCompaniesParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateCompaniesParameters {
    return new MigrateCompaniesParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateCompaniesParameters {
    return new MigrateCompaniesParameters().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateCompaniesParameters | PlainMessage<MigrateCompaniesParameters> | undefined, b: MigrateCompaniesParameters | PlainMessage<MigrateCompaniesParameters> | undefined): boolean {
    return proto3.util.equals(MigrateCompaniesParameters, a, b);
  }
}

/**
 * @generated from message search_engine.MigrateCompaniesResponse
 */
export class MigrateCompaniesResponse extends Message<MigrateCompaniesResponse> {
  constructor(data?: PartialMessage<MigrateCompaniesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MigrateCompaniesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateCompaniesResponse {
    return new MigrateCompaniesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateCompaniesResponse {
    return new MigrateCompaniesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateCompaniesResponse {
    return new MigrateCompaniesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateCompaniesResponse | PlainMessage<MigrateCompaniesResponse> | undefined, b: MigrateCompaniesResponse | PlainMessage<MigrateCompaniesResponse> | undefined): boolean {
    return proto3.util.equals(MigrateCompaniesResponse, a, b);
  }
}

/**
 * @generated from message search_engine.DailyMigrateCompaniesParameters
 */
export class DailyMigrateCompaniesParameters extends Message<DailyMigrateCompaniesParameters> {
  /**
   * @generated from field: optional int32 refreshFromDaysAgo = 1;
   */
  refreshFromDaysAgo?: number;

  constructor(data?: PartialMessage<DailyMigrateCompaniesParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.DailyMigrateCompaniesParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "refreshFromDaysAgo", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DailyMigrateCompaniesParameters {
    return new DailyMigrateCompaniesParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DailyMigrateCompaniesParameters {
    return new DailyMigrateCompaniesParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DailyMigrateCompaniesParameters {
    return new DailyMigrateCompaniesParameters().fromJsonString(jsonString, options);
  }

  static equals(a: DailyMigrateCompaniesParameters | PlainMessage<DailyMigrateCompaniesParameters> | undefined, b: DailyMigrateCompaniesParameters | PlainMessage<DailyMigrateCompaniesParameters> | undefined): boolean {
    return proto3.util.equals(DailyMigrateCompaniesParameters, a, b);
  }
}

/**
 * @generated from message search_engine.DailyMigrateCompaniesResponse
 */
export class DailyMigrateCompaniesResponse extends Message<DailyMigrateCompaniesResponse> {
  constructor(data?: PartialMessage<DailyMigrateCompaniesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.DailyMigrateCompaniesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DailyMigrateCompaniesResponse {
    return new DailyMigrateCompaniesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DailyMigrateCompaniesResponse {
    return new DailyMigrateCompaniesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DailyMigrateCompaniesResponse {
    return new DailyMigrateCompaniesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DailyMigrateCompaniesResponse | PlainMessage<DailyMigrateCompaniesResponse> | undefined, b: DailyMigrateCompaniesResponse | PlainMessage<DailyMigrateCompaniesResponse> | undefined): boolean {
    return proto3.util.equals(DailyMigrateCompaniesResponse, a, b);
  }
}

/**
 * @generated from message search_engine.MigratePeopleParameters
 */
export class MigratePeopleParameters extends Message<MigratePeopleParameters> {
  /**
   * @generated from field: string toIndex = 1;
   */
  toIndex = "";

  constructor(data?: PartialMessage<MigratePeopleParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MigratePeopleParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "toIndex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigratePeopleParameters {
    return new MigratePeopleParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigratePeopleParameters {
    return new MigratePeopleParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigratePeopleParameters {
    return new MigratePeopleParameters().fromJsonString(jsonString, options);
  }

  static equals(a: MigratePeopleParameters | PlainMessage<MigratePeopleParameters> | undefined, b: MigratePeopleParameters | PlainMessage<MigratePeopleParameters> | undefined): boolean {
    return proto3.util.equals(MigratePeopleParameters, a, b);
  }
}

/**
 * @generated from message search_engine.MigratePeopleResponse
 */
export class MigratePeopleResponse extends Message<MigratePeopleResponse> {
  constructor(data?: PartialMessage<MigratePeopleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MigratePeopleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigratePeopleResponse {
    return new MigratePeopleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigratePeopleResponse {
    return new MigratePeopleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigratePeopleResponse {
    return new MigratePeopleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MigratePeopleResponse | PlainMessage<MigratePeopleResponse> | undefined, b: MigratePeopleResponse | PlainMessage<MigratePeopleResponse> | undefined): boolean {
    return proto3.util.equals(MigratePeopleResponse, a, b);
  }
}

/**
 * @generated from message search_engine.MigratePeopleCountParameters
 */
export class MigratePeopleCountParameters extends Message<MigratePeopleCountParameters> {
  /**
   * @generated from field: string toIndex = 1;
   */
  toIndex = "";

  /**
   * @generated from field: optional int32 refreshFromDaysAgo = 2;
   */
  refreshFromDaysAgo?: number;

  /**
   * @generated from field: bool checkForZero = 3;
   */
  checkForZero = false;

  constructor(data?: PartialMessage<MigratePeopleCountParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MigratePeopleCountParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "toIndex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refreshFromDaysAgo", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "checkForZero", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigratePeopleCountParameters {
    return new MigratePeopleCountParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigratePeopleCountParameters {
    return new MigratePeopleCountParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigratePeopleCountParameters {
    return new MigratePeopleCountParameters().fromJsonString(jsonString, options);
  }

  static equals(a: MigratePeopleCountParameters | PlainMessage<MigratePeopleCountParameters> | undefined, b: MigratePeopleCountParameters | PlainMessage<MigratePeopleCountParameters> | undefined): boolean {
    return proto3.util.equals(MigratePeopleCountParameters, a, b);
  }
}

/**
 * @generated from message search_engine.MigratePeopleCountResponse
 */
export class MigratePeopleCountResponse extends Message<MigratePeopleCountResponse> {
  constructor(data?: PartialMessage<MigratePeopleCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MigratePeopleCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigratePeopleCountResponse {
    return new MigratePeopleCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigratePeopleCountResponse {
    return new MigratePeopleCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigratePeopleCountResponse {
    return new MigratePeopleCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MigratePeopleCountResponse | PlainMessage<MigratePeopleCountResponse> | undefined, b: MigratePeopleCountResponse | PlainMessage<MigratePeopleCountResponse> | undefined): boolean {
    return proto3.util.equals(MigratePeopleCountResponse, a, b);
  }
}

