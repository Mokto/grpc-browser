// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file search_engine_companies_parameters-v1.proto (package search_engine, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum search_engine.SimilarityField
 */
export enum SimilarityField {
  /**
   * @generated from enum value: ContextVectors = 0;
   */
  ContextVectors = 0,

  /**
   * @generated from enum value: Industries = 1;
   */
  Industries = 1,

  /**
   * @generated from enum value: IndustryCategories = 2;
   */
  IndustryCategories = 2,

  /**
   * @generated from enum value: Tfidf = 3;
   */
  Tfidf = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SimilarityField)
proto3.util.setEnumType(SimilarityField, "search_engine.SimilarityField", [
  { no: 0, name: "ContextVectors" },
  { no: 1, name: "Industries" },
  { no: 2, name: "IndustryCategories" },
  { no: 3, name: "Tfidf" },
]);

/**
 * @generated from message search_engine.CompaniesFilters
 */
export class CompaniesFilters extends Message<CompaniesFilters> {
  /**
   * @generated from field: repeated string similarDomains = 1;
   */
  similarDomains: string[] = [];

  /**
   * @generated from field: repeated search_engine.SimilarityField similarityFields = 2;
   */
  similarityFields: SimilarityField[] = [];

  /**
   * @generated from field: float minScore = 3;
   */
  minScore = 0;

  /**
   * @generated from field: bool excludeSearchedDomains = 4;
   */
  excludeSearchedDomains = false;

  /**
   * @generated from field: repeated string where = 5;
   */
  where: string[] = [];

  /**
   * @generated from field: repeated string includeDomains = 6;
   */
  includeDomains: string[] = [];

  /**
   * @generated from field: repeated string excludeDomains = 7;
   */
  excludeDomains: string[] = [];

  /**
   * @generated from field: repeated string companySizes = 8;
   */
  companySizes: string[] = [];

  /**
   * @generated from field: repeated string contentLanguages = 9;
   */
  contentLanguages: string[] = [];

  /**
   * @generated from field: optional bool ecommerce = 10;
   */
  ecommerce?: boolean;

  /**
   * @generated from field: repeated string exists = 11;
   */
  exists: string[] = [];

  /**
   * @generated from field: search_engine.FromTo yearFounded = 12;
   */
  yearFounded?: FromTo;

  /**
   * @generated from field: search_engine.FromTo countriesCount = 13;
   */
  countriesCount?: FromTo;

  /**
   * @generated from field: bool random = 14;
   */
  random = false;

  /**
   * @generated from field: repeated int32 revenues = 15;
   */
  revenues: number[] = [];

  /**
   * @generated from field: search_engine.FromTo peopleCount = 16;
   */
  peopleCount?: FromTo;

  /**
   * @generated from field: search_engine.FromTo webTrafficVisits = 17;
   */
  webTrafficVisits?: FromTo;

  /**
   * @generated from field: search_engine.FromTo webTrafficViews = 18;
   */
  webTrafficViews?: FromTo;

  /**
   * @generated from field: search_engine.CompaniesFilters.MobileApps mobileApps = 19;
   */
  mobileApps?: CompaniesFilters_MobileApps;

  /**
   * @generated from field: search_engine.LocationFilter headquarterLocation = 20;
   */
  headquarterLocation?: LocationFilter;

  /**
   * @generated from field: search_engine.LocationFilter otherLocations = 21;
   */
  otherLocations?: LocationFilter;

  /**
   * @generated from field: search_engine.FromTo locationsCount = 22;
   */
  locationsCount?: FromTo;

  /**
   * @generated from field: repeated search_engine.FromToWithName departmentSizes = 23;
   */
  departmentSizes: FromToWithName[] = [];

  /**
   * @generated from field: repeated string notExists = 24;
   */
  notExists: string[] = [];

  /**
   * @generated from field: string encodedBody = 25;
   */
  encodedBody = "";

  /**
   * @generated from field: optional search_engine.Keywords keywords = 26;
   */
  keywords?: Keywords;

  /**
   * @generated from field: search_engine.IntentDataFilter intentData = 27;
   */
  intentData?: IntentDataFilter;

  /**
   * @generated from field: repeated string redirectedFrom = 28;
   */
  redirectedFrom: string[] = [];

  /**
   * @generated from field: search_engine.SimilarDomainWeights similarDomainWeights = 29;
   */
  similarDomainWeights?: SimilarDomainWeights;

  /**
   * @generated from field: repeated search_engine.State states = 30;
   */
  states: State[] = [];

  /**
   * @generated from field: repeated int32 companyTypes = 31;
   */
  companyTypes: number[] = [];

  /**
   * @generated from field: repeated string phones = 32;
   */
  phones: string[] = [];

  constructor(data?: PartialMessage<CompaniesFilters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.CompaniesFilters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "similarDomains", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "similarityFields", kind: "enum", T: proto3.getEnumType(SimilarityField), repeated: true },
    { no: 3, name: "minScore", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "excludeSearchedDomains", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "where", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "includeDomains", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "excludeDomains", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "companySizes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "contentLanguages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "ecommerce", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 11, name: "exists", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "yearFounded", kind: "message", T: FromTo },
    { no: 13, name: "countriesCount", kind: "message", T: FromTo },
    { no: 14, name: "random", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "revenues", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 16, name: "peopleCount", kind: "message", T: FromTo },
    { no: 17, name: "webTrafficVisits", kind: "message", T: FromTo },
    { no: 18, name: "webTrafficViews", kind: "message", T: FromTo },
    { no: 19, name: "mobileApps", kind: "message", T: CompaniesFilters_MobileApps },
    { no: 20, name: "headquarterLocation", kind: "message", T: LocationFilter },
    { no: 21, name: "otherLocations", kind: "message", T: LocationFilter },
    { no: 22, name: "locationsCount", kind: "message", T: FromTo },
    { no: 23, name: "departmentSizes", kind: "message", T: FromToWithName, repeated: true },
    { no: 24, name: "notExists", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 25, name: "encodedBody", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "keywords", kind: "message", T: Keywords, opt: true },
    { no: 27, name: "intentData", kind: "message", T: IntentDataFilter },
    { no: 28, name: "redirectedFrom", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 29, name: "similarDomainWeights", kind: "message", T: SimilarDomainWeights },
    { no: 30, name: "states", kind: "message", T: State, repeated: true },
    { no: 31, name: "companyTypes", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 32, name: "phones", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompaniesFilters {
    return new CompaniesFilters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompaniesFilters {
    return new CompaniesFilters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompaniesFilters {
    return new CompaniesFilters().fromJsonString(jsonString, options);
  }

  static equals(a: CompaniesFilters | PlainMessage<CompaniesFilters> | undefined, b: CompaniesFilters | PlainMessage<CompaniesFilters> | undefined): boolean {
    return proto3.util.equals(CompaniesFilters, a, b);
  }
}

/**
 * @generated from message search_engine.CompaniesFilters.MobileApps
 */
export class CompaniesFilters_MobileApps extends Message<CompaniesFilters_MobileApps> {
  /**
   * @generated from field: search_engine.FromTo count = 1;
   */
  count?: FromTo;

  /**
   * @generated from field: search_engine.FromTo downloads = 2;
   */
  downloads?: FromTo;

  /**
   * @generated from field: search_engine.FromTo releaseYear = 3;
   */
  releaseYear?: FromTo;

  /**
   * @generated from field: bool onlyInAppPurchase = 4;
   */
  onlyInAppPurchase = false;

  constructor(data?: PartialMessage<CompaniesFilters_MobileApps>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.CompaniesFilters.MobileApps";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "message", T: FromTo },
    { no: 2, name: "downloads", kind: "message", T: FromTo },
    { no: 3, name: "releaseYear", kind: "message", T: FromTo },
    { no: 4, name: "onlyInAppPurchase", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompaniesFilters_MobileApps {
    return new CompaniesFilters_MobileApps().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompaniesFilters_MobileApps {
    return new CompaniesFilters_MobileApps().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompaniesFilters_MobileApps {
    return new CompaniesFilters_MobileApps().fromJsonString(jsonString, options);
  }

  static equals(a: CompaniesFilters_MobileApps | PlainMessage<CompaniesFilters_MobileApps> | undefined, b: CompaniesFilters_MobileApps | PlainMessage<CompaniesFilters_MobileApps> | undefined): boolean {
    return proto3.util.equals(CompaniesFilters_MobileApps, a, b);
  }
}

/**
 * @generated from message search_engine.State
 */
export class State extends Message<State> {
  /**
   * @generated from field: string abbreviation = 1;
   */
  abbreviation = "";

  /**
   * @generated from field: string country = 2;
   */
  country = "";

  /**
   * @generated from field: bool isPrimary = 3;
   */
  isPrimary = false;

  constructor(data?: PartialMessage<State>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.State";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "abbreviation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "isPrimary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): State {
    return new State().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): State {
    return new State().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): State {
    return new State().fromJsonString(jsonString, options);
  }

  static equals(a: State | PlainMessage<State> | undefined, b: State | PlainMessage<State> | undefined): boolean {
    return proto3.util.equals(State, a, b);
  }
}

/**
 * @generated from message search_engine.FromTo
 */
export class FromTo extends Message<FromTo> {
  /**
   * @generated from field: optional int32 gte = 1;
   */
  gte?: number;

  /**
   * @generated from field: optional int32 lte = 2;
   */
  lte?: number;

  constructor(data?: PartialMessage<FromTo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.FromTo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gte", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "lte", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FromTo {
    return new FromTo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FromTo {
    return new FromTo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FromTo {
    return new FromTo().fromJsonString(jsonString, options);
  }

  static equals(a: FromTo | PlainMessage<FromTo> | undefined, b: FromTo | PlainMessage<FromTo> | undefined): boolean {
    return proto3.util.equals(FromTo, a, b);
  }
}

/**
 * @generated from message search_engine.FromToWithName
 */
export class FromToWithName extends Message<FromToWithName> {
  /**
   * @generated from field: optional int32 gte = 1;
   */
  gte?: number;

  /**
   * @generated from field: optional int32 lte = 2;
   */
  lte?: number;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<FromToWithName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.FromToWithName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gte", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "lte", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FromToWithName {
    return new FromToWithName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FromToWithName {
    return new FromToWithName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FromToWithName {
    return new FromToWithName().fromJsonString(jsonString, options);
  }

  static equals(a: FromToWithName | PlainMessage<FromToWithName> | undefined, b: FromToWithName | PlainMessage<FromToWithName> | undefined): boolean {
    return proto3.util.equals(FromToWithName, a, b);
  }
}

/**
 * @generated from message search_engine.LocationFilter
 */
export class LocationFilter extends Message<LocationFilter> {
  /**
   * @generated from field: float latitude = 1;
   */
  latitude = 0;

  /**
   * @generated from field: float longitude = 2;
   */
  longitude = 0;

  /**
   * @generated from field: int64 radius = 3;
   */
  radius = protoInt64.zero;

  constructor(data?: PartialMessage<LocationFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.LocationFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "latitude", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "longitude", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "radius", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationFilter {
    return new LocationFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationFilter {
    return new LocationFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationFilter {
    return new LocationFilter().fromJsonString(jsonString, options);
  }

  static equals(a: LocationFilter | PlainMessage<LocationFilter> | undefined, b: LocationFilter | PlainMessage<LocationFilter> | undefined): boolean {
    return proto3.util.equals(LocationFilter, a, b);
  }
}

/**
 * @generated from message search_engine.Keywords
 */
export class Keywords extends Message<Keywords> {
  /**
   * @generated from field: repeated string anyOf = 1;
   */
  anyOf: string[] = [];

  /**
   * @generated from field: repeated string allOf = 2;
   */
  allOf: string[] = [];

  /**
   * @generated from field: repeated string noneOf = 3;
   */
  noneOf: string[] = [];

  constructor(data?: PartialMessage<Keywords>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Keywords";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "anyOf", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "allOf", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "noneOf", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Keywords {
    return new Keywords().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Keywords {
    return new Keywords().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Keywords {
    return new Keywords().fromJsonString(jsonString, options);
  }

  static equals(a: Keywords | PlainMessage<Keywords> | undefined, b: Keywords | PlainMessage<Keywords> | undefined): boolean {
    return proto3.util.equals(Keywords, a, b);
  }
}

/**
 * @generated from message search_engine.IntentDataFilter
 */
export class IntentDataFilter extends Message<IntentDataFilter> {
  /**
   * @generated from field: repeated string userTopics = 1;
   */
  userTopics: string[] = [];

  /**
   * @generated from field: int32 minimumMatch = 2;
   */
  minimumMatch = 0;

  /**
   * @generated from field: repeated string allOf = 3;
   */
  allOf: string[] = [];

  /**
   * @generated from field: repeated string anyOf = 4;
   */
  anyOf: string[] = [];

  constructor(data?: PartialMessage<IntentDataFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.IntentDataFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userTopics", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "minimumMatch", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "allOf", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "anyOf", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentDataFilter {
    return new IntentDataFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentDataFilter {
    return new IntentDataFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentDataFilter {
    return new IntentDataFilter().fromJsonString(jsonString, options);
  }

  static equals(a: IntentDataFilter | PlainMessage<IntentDataFilter> | undefined, b: IntentDataFilter | PlainMessage<IntentDataFilter> | undefined): boolean {
    return proto3.util.equals(IntentDataFilter, a, b);
  }
}

/**
 * @generated from message search_engine.SimilarDomainWeights
 */
export class SimilarDomainWeights extends Message<SimilarDomainWeights> {
  /**
   * @generated from field: optional float companySize = 1;
   */
  companySize?: number;

  /**
   * @generated from field: optional float industryCategoryFeatures = 2;
   */
  industryCategoryFeatures?: number;

  /**
   * @generated from field: optional float industryFeatures = 3;
   */
  industryFeatures?: number;

  /**
   * @generated from field: optional float tfidf = 4;
   */
  tfidf?: number;

  constructor(data?: PartialMessage<SimilarDomainWeights>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.SimilarDomainWeights";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "companySize", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "industryCategoryFeatures", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "industryFeatures", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "tfidf", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimilarDomainWeights {
    return new SimilarDomainWeights().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimilarDomainWeights {
    return new SimilarDomainWeights().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimilarDomainWeights {
    return new SimilarDomainWeights().fromJsonString(jsonString, options);
  }

  static equals(a: SimilarDomainWeights | PlainMessage<SimilarDomainWeights> | undefined, b: SimilarDomainWeights | PlainMessage<SimilarDomainWeights> | undefined): boolean {
    return proto3.util.equals(SimilarDomainWeights, a, b);
  }
}

