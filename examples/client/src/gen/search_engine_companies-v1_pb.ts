// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file search_engine_companies-v1.proto (package search_engine, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum search_engine.CompanyType
 */
export enum CompanyType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: COMPANY = 1;
   */
  COMPANY = 1,

  /**
   * @generated from enum value: PERSONAL = 2;
   */
  PERSONAL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CompanyType)
proto3.util.setEnumType(CompanyType, "search_engine.CompanyType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "COMPANY" },
  { no: 2, name: "PERSONAL" },
]);

/**
 * @generated from message search_engine.Company
 */
export class Company extends Message<Company> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: repeated string countries = 2;
   */
  countries: string[] = [];

  /**
   * @generated from field: string primaryCountry = 3;
   */
  primaryCountry = "";

  /**
   * @generated from field: string companySize = 4;
   */
  companySize = "";

  /**
   * @generated from field: string contentLanguage = 5;
   */
  contentLanguage = "";

  /**
   * @generated from field: repeated search_engine.Company.NameScore industryCategories = 6;
   */
  industryCategories: Company_NameScore[] = [];

  /**
   * @generated from field: repeated search_engine.Company.NameScore industries = 7;
   */
  industries: Company_NameScore[] = [];

  /**
   * @generated from field: bool ecommerce = 8;
   */
  ecommerce = false;

  /**
   * @generated from field: repeated string brands = 9;
   */
  brands: string[] = [];

  /**
   * @generated from field: repeated string keywords = 10;
   */
  keywords: string[] = [];

  /**
   * @generated from field: string crawledAt = 11;
   */
  crawledAt = "";

  /**
   * @generated from field: int32 peopleCount = 12;
   */
  peopleCount = 0;

  /**
   * @generated from field: string resolvingStatus = 13;
   */
  resolvingStatus = "";

  /**
   * @generated from field: search_engine.Revenue revenue = 14;
   */
  revenue?: Revenue;

  /**
   * @generated from field: string updatedAt = 15;
   */
  updatedAt = "";

  /**
   * @generated from field: int32 yearFounded = 16;
   */
  yearFounded = 0;

  /**
   * @generated from field: int32 countriesCount = 17;
   */
  countriesCount = 0;

  /**
   * @generated from field: string description = 18;
   */
  description = "";

  /**
   * @generated from field: repeated string emails = 19;
   */
  emails: string[] = [];

  /**
   * @generated from field: repeated search_engine.ContactNumber phones = 20;
   */
  phones: ContactNumber[] = [];

  /**
   * @generated from field: string logo = 21;
   */
  logo = "";

  /**
   * @generated from field: repeated string technologies = 22;
   */
  technologies: string[] = [];

  /**
   * @generated from field: repeated int32 technologyCategories = 23;
   */
  technologyCategories: number[] = [];

  /**
   * @generated from field: search_engine.Registration registration = 24;
   */
  registration?: Registration;

  /**
   * @generated from field: search_engine.AppsStatistics mobileAppsStatistics = 25;
   */
  mobileAppsStatistics?: AppsStatistics;

  /**
   * @generated from field: repeated search_engine.App mobileApps = 26;
   */
  mobileApps: App[] = [];

  /**
   * @generated from field: optional search_engine.WebTraffic webTraffic = 27;
   */
  webTraffic?: WebTraffic;

  /**
   * @generated from field: float socialPresence = 28;
   */
  socialPresence = 0;

  /**
   * @generated from field: search_engine.Medias medias = 29;
   */
  medias?: Medias;

  /**
   * @generated from field: string name = 30;
   */
  name = "";

  /**
   * @generated from field: string legalName = 31;
   */
  legalName = "";

  /**
   * @generated from field: int32 locationsCount = 32;
   */
  locationsCount = 0;

  /**
   * @generated from field: repeated search_engine.Location locations = 33;
   */
  locations: Location[] = [];

  /**
   * @generated from field: search_engine.DepartmentSizes departmentSizes = 34;
   */
  departmentSizes?: DepartmentSizes;

  /**
   * @generated from field: repeated string nameCandidates = 35;
   */
  nameCandidates: string[] = [];

  /**
   * @generated from field: search_engine.Triggers triggers = 36;
   */
  triggers?: Triggers;

  /**
   * @generated from field: string rootUrl = 37;
   */
  rootUrl = "";

  /**
   * @generated from field: repeated string products = 38;
   */
  products: string[] = [];

  /**
   * @generated from field: string aggregatedKeywords = 39;
   */
  aggregatedKeywords = "";

  /**
   * @generated from field: repeated search_engine.IntentData intentData = 40;
   */
  intentData: IntentData[] = [];

  /**
   * @generated from field: string peopleCountUpdatedAt = 41;
   */
  peopleCountUpdatedAt = "";

  /**
   * @generated from field: repeated string redirectedFrom = 42;
   */
  redirectedFrom: string[] = [];

  /**
   * @generated from field: optional string lastMigratedAt = 43;
   */
  lastMigratedAt?: string;

  /**
   * @generated from field: repeated search_engine.ContactNumber faxes = 44;
   */
  faxes: ContactNumber[] = [];

  /**
   * @generated from field: search_engine.ImpressumData impressum = 45;
   */
  impressum?: ImpressumData;

  /**
   * @generated from field: repeated float contextVector = 50;
   */
  contextVector: number[] = [];

  /**
   * @generated from field: repeated string contextVertices = 51;
   */
  contextVertices: string[] = [];

  /**
   * @generated from field: repeated float contextVectorShort = 52;
   */
  contextVectorShort: number[] = [];

  /**
   * @generated from field: repeated string relevantIndustries = 53;
   */
  relevantIndustries: string[] = [];

  /**
   * @generated from field: map<string, float> industryCategoryFeatures = 54;
   */
  industryCategoryFeatures: { [key: string]: number } = {};

  /**
   * @generated from field: repeated string industriesSummary = 55;
   */
  industriesSummary: string[] = [];

  /**
   * @generated from field: repeated string industryCategoriesSummary = 56;
   */
  industryCategoriesSummary: string[] = [];

  /**
   * @generated from field: map<string, float> industryFeatures = 57;
   */
  industryFeatures: { [key: string]: number } = {};

  /**
   * @generated from field: map<string, float> tfidf = 58;
   */
  tfidf: { [key: string]: number } = {};

  /**
   * @generated from field: repeated string mediasSummary = 59;
   */
  mediasSummary: string[] = [];

  /**
   * @generated from field: map<string, float> companySizeRank = 60;
   */
  companySizeRank: { [key: string]: number } = {};

  /**
   * @generated from field: repeated string intentDataSummary = 61;
   */
  intentDataSummary: string[] = [];

  /**
   * repeated string nameCandidates = 51 [ (options).exclude = true ];
   *
   * @generated from field: search_engine.CompanyType companyType = 62;
   */
  companyType = CompanyType.UNKNOWN;

  constructor(data?: PartialMessage<Company>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Company";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "countries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "primaryCountry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "companySize", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "contentLanguage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "industryCategories", kind: "message", T: Company_NameScore, repeated: true },
    { no: 7, name: "industries", kind: "message", T: Company_NameScore, repeated: true },
    { no: 8, name: "ecommerce", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "brands", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "keywords", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "crawledAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "peopleCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "resolvingStatus", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "revenue", kind: "message", T: Revenue },
    { no: 15, name: "updatedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "yearFounded", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "countriesCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "emails", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 20, name: "phones", kind: "message", T: ContactNumber, repeated: true },
    { no: 21, name: "logo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "technologies", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 23, name: "technologyCategories", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 24, name: "registration", kind: "message", T: Registration },
    { no: 25, name: "mobileAppsStatistics", kind: "message", T: AppsStatistics },
    { no: 26, name: "mobileApps", kind: "message", T: App, repeated: true },
    { no: 27, name: "webTraffic", kind: "message", T: WebTraffic, opt: true },
    { no: 28, name: "socialPresence", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 29, name: "medias", kind: "message", T: Medias },
    { no: 30, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "legalName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 32, name: "locationsCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 33, name: "locations", kind: "message", T: Location, repeated: true },
    { no: 34, name: "departmentSizes", kind: "message", T: DepartmentSizes },
    { no: 35, name: "nameCandidates", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 36, name: "triggers", kind: "message", T: Triggers },
    { no: 37, name: "rootUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 38, name: "products", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 39, name: "aggregatedKeywords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "intentData", kind: "message", T: IntentData, repeated: true },
    { no: 41, name: "peopleCountUpdatedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 42, name: "redirectedFrom", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 43, name: "lastMigratedAt", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 44, name: "faxes", kind: "message", T: ContactNumber, repeated: true },
    { no: 45, name: "impressum", kind: "message", T: ImpressumData },
    { no: 50, name: "contextVector", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 51, name: "contextVertices", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 52, name: "contextVectorShort", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 53, name: "relevantIndustries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 54, name: "industryCategoryFeatures", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 2 /* ScalarType.FLOAT */} },
    { no: 55, name: "industriesSummary", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 56, name: "industryCategoriesSummary", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 57, name: "industryFeatures", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 2 /* ScalarType.FLOAT */} },
    { no: 58, name: "tfidf", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 2 /* ScalarType.FLOAT */} },
    { no: 59, name: "mediasSummary", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 60, name: "companySizeRank", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 2 /* ScalarType.FLOAT */} },
    { no: 61, name: "intentDataSummary", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 62, name: "companyType", kind: "enum", T: proto3.getEnumType(CompanyType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Company {
    return new Company().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Company {
    return new Company().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Company {
    return new Company().fromJsonString(jsonString, options);
  }

  static equals(a: Company | PlainMessage<Company> | undefined, b: Company | PlainMessage<Company> | undefined): boolean {
    return proto3.util.equals(Company, a, b);
  }
}

/**
 * @generated from message search_engine.Company.NameScore
 */
export class Company_NameScore extends Message<Company_NameScore> {
  /**
   * @generated from field: float score = 1;
   */
  score = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Company_NameScore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Company.NameScore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Company_NameScore {
    return new Company_NameScore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Company_NameScore {
    return new Company_NameScore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Company_NameScore {
    return new Company_NameScore().fromJsonString(jsonString, options);
  }

  static equals(a: Company_NameScore | PlainMessage<Company_NameScore> | undefined, b: Company_NameScore | PlainMessage<Company_NameScore> | undefined): boolean {
    return proto3.util.equals(Company_NameScore, a, b);
  }
}

/**
 * @generated from message search_engine.Revenue
 */
export class Revenue extends Message<Revenue> {
  /**
   * @generated from field: int32 category = 1;
   */
  category = 0;

  /**
   * @generated from field: int64 value = 2;
   */
  value = protoInt64.zero;

  /**
   * @generated from field: string currency = 3;
   */
  currency = "";

  constructor(data?: PartialMessage<Revenue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Revenue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "category", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Revenue {
    return new Revenue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Revenue {
    return new Revenue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Revenue {
    return new Revenue().fromJsonString(jsonString, options);
  }

  static equals(a: Revenue | PlainMessage<Revenue> | undefined, b: Revenue | PlainMessage<Revenue> | undefined): boolean {
    return proto3.util.equals(Revenue, a, b);
  }
}

/**
 * @generated from message search_engine.Medias
 */
export class Medias extends Message<Medias> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  /**
   * @generated from field: optional search_engine.Media facebook = 2;
   */
  facebook?: Media;

  /**
   * @generated from field: optional search_engine.Media linkedin = 3;
   */
  linkedin?: Media;

  /**
   * @generated from field: optional search_engine.Media instagram = 4;
   */
  instagram?: Media;

  /**
   * @generated from field: optional search_engine.Media twitter = 5;
   */
  twitter?: Media;

  /**
   * @generated from field: optional search_engine.Media youtube = 6;
   */
  youtube?: Media;

  /**
   * @generated from field: optional search_engine.Media xing = 7;
   */
  xing?: Media;

  /**
   * @generated from field: optional search_engine.Media tiktok = 8;
   */
  tiktok?: Media;

  constructor(data?: PartialMessage<Medias>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Medias";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "facebook", kind: "message", T: Media, opt: true },
    { no: 3, name: "linkedin", kind: "message", T: Media, opt: true },
    { no: 4, name: "instagram", kind: "message", T: Media, opt: true },
    { no: 5, name: "twitter", kind: "message", T: Media, opt: true },
    { no: 6, name: "youtube", kind: "message", T: Media, opt: true },
    { no: 7, name: "xing", kind: "message", T: Media, opt: true },
    { no: 8, name: "tiktok", kind: "message", T: Media, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Medias {
    return new Medias().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Medias {
    return new Medias().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Medias {
    return new Medias().fromJsonString(jsonString, options);
  }

  static equals(a: Medias | PlainMessage<Medias> | undefined, b: Medias | PlainMessage<Medias> | undefined): boolean {
    return proto3.util.equals(Medias, a, b);
  }
}

/**
 * @generated from message search_engine.LocationWithSources
 */
export class LocationWithSources extends Message<LocationWithSources> {
  /**
   * @generated from field: search_engine.Location location = 1;
   */
  location?: Location;

  /**
   * @generated from field: repeated string sources = 2;
   */
  sources: string[] = [];

  constructor(data?: PartialMessage<LocationWithSources>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.LocationWithSources";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "location", kind: "message", T: Location },
    { no: 2, name: "sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationWithSources {
    return new LocationWithSources().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationWithSources {
    return new LocationWithSources().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationWithSources {
    return new LocationWithSources().fromJsonString(jsonString, options);
  }

  static equals(a: LocationWithSources | PlainMessage<LocationWithSources> | undefined, b: LocationWithSources | PlainMessage<LocationWithSources> | undefined): boolean {
    return proto3.util.equals(LocationWithSources, a, b);
  }
}

/**
 * @generated from message search_engine.Location
 */
export class Location extends Message<Location> {
  /**
   * @generated from field: bool primary = 1;
   */
  primary = false;

  /**
   * @generated from field: search_engine.GeoPoint geolocation = 2;
   */
  geolocation?: GeoPoint;

  /**
   * @generated from field: string country = 3;
   */
  country = "";

  /**
   * @generated from field: string locality = 4;
   */
  locality = "";

  /**
   * @generated from field: string region = 5;
   */
  region = "";

  /**
   * @generated from field: string postalCode = 6;
   */
  postalCode = "";

  /**
   * @generated from field: string streetAddress = 7;
   */
  streetAddress = "";

  /**
   * @generated from field: string rawAddress = 8;
   */
  rawAddress = "";

  /**
   * @generated from field: string state = 9;
   */
  state = "";

  /**
   * @generated from field: string sourceAddressId = 10;
   */
  sourceAddressId = "";

  constructor(data?: PartialMessage<Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "primary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "geolocation", kind: "message", T: GeoPoint },
    { no: 3, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "locality", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "postalCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "streetAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "rawAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "sourceAddressId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Location {
    return new Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJsonString(jsonString, options);
  }

  static equals(a: Location | PlainMessage<Location> | undefined, b: Location | PlainMessage<Location> | undefined): boolean {
    return proto3.util.equals(Location, a, b);
  }
}

/**
 * @generated from message search_engine.GeoPoint
 */
export class GeoPoint extends Message<GeoPoint> {
  /**
   * @generated from field: float lat = 1;
   */
  lat = 0;

  /**
   * @generated from field: float lon = 2;
   */
  lon = 0;

  constructor(data?: PartialMessage<GeoPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.GeoPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lat", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "lon", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoPoint {
    return new GeoPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoPoint {
    return new GeoPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoPoint {
    return new GeoPoint().fromJsonString(jsonString, options);
  }

  static equals(a: GeoPoint | PlainMessage<GeoPoint> | undefined, b: GeoPoint | PlainMessage<GeoPoint> | undefined): boolean {
    return proto3.util.equals(GeoPoint, a, b);
  }
}

/**
 * @generated from message search_engine.Media
 */
export class Media extends Message<Media> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string specialties = 3;
   */
  specialties = "";

  /**
   * @generated from field: repeated string ids = 4;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<Media>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Media";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "specialties", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Media {
    return new Media().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Media {
    return new Media().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Media {
    return new Media().fromJsonString(jsonString, options);
  }

  static equals(a: Media | PlainMessage<Media> | undefined, b: Media | PlainMessage<Media> | undefined): boolean {
    return proto3.util.equals(Media, a, b);
  }
}

/**
 * @generated from message search_engine.AppsStatistics
 */
export class AppsStatistics extends Message<AppsStatistics> {
  /**
   * @generated from field: int64 appstore = 1;
   */
  appstore = protoInt64.zero;

  /**
   * @generated from field: int64 googleplay = 2;
   */
  googleplay = protoInt64.zero;

  /**
   * @generated from field: int64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * @generated from field: float averageRating = 4;
   */
  averageRating = 0;

  constructor(data?: PartialMessage<AppsStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.AppsStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appstore", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "googleplay", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "averageRating", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppsStatistics {
    return new AppsStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppsStatistics {
    return new AppsStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppsStatistics {
    return new AppsStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: AppsStatistics | PlainMessage<AppsStatistics> | undefined, b: AppsStatistics | PlainMessage<AppsStatistics> | undefined): boolean {
    return proto3.util.equals(AppsStatistics, a, b);
  }
}

/**
 * @generated from message search_engine.App
 */
export class App extends Message<App> {
  /**
   * @generated from field: string category = 1;
   */
  category = "";

  /**
   * @generated from field: int64 downloads = 2;
   */
  downloads = protoInt64.zero;

  /**
   * @generated from field: bool iap = 3;
   */
  iap = false;

  /**
   * @generated from field: string id = 4;
   */
  id = "";

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: float rating = 6;
   */
  rating = 0;

  /**
   * @generated from field: string released = 7;
   */
  released = "";

  /**
   * @generated from field: string type = 8;
   */
  type = "";

  /**
   * @generated from field: string updated = 9;
   */
  updated = "";

  constructor(data?: PartialMessage<App>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.App";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "downloads", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "iap", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "rating", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "released", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "updated", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): App {
    return new App().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): App {
    return new App().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): App {
    return new App().fromJsonString(jsonString, options);
  }

  static equals(a: App | PlainMessage<App> | undefined, b: App | PlainMessage<App> | undefined): boolean {
    return proto3.util.equals(App, a, b);
  }
}

/**
 * @generated from message search_engine.WebTraffic
 */
export class WebTraffic extends Message<WebTraffic> {
  /**
   * @generated from field: map<string, float> ageDistribution = 1;
   */
  ageDistribution: { [key: string]: number } = {};

  /**
   * @generated from field: string date = 2;
   */
  date = "";

  /**
   * @generated from field: map<string, float> genderDistribution = 3;
   */
  genderDistribution: { [key: string]: number } = {};

  /**
   * @generated from field: bool isSmallSite = 4;
   */
  isSmallSite = false;

  /**
   * @generated from field: string bounceRateFormatted = 5;
   */
  bounceRateFormatted = "";

  /**
   * @generated from field: float pagesPerVisit = 6;
   */
  pagesPerVisit = 0;

  /**
   * @generated from field: string visitsAvgDurationFormatted = 7;
   */
  visitsAvgDurationFormatted = "";

  /**
   * @generated from field: map<string, int64> visitsHistory = 8;
   */
  visitsHistory: { [key: string]: bigint } = {};

  /**
   * @generated from field: int64 visitsTotalCount = 9;
   */
  visitsTotalCount = protoInt64.zero;

  /**
   * @generated from field: int64 visitsTotalCountRank = 10;
   */
  visitsTotalCountRank = protoInt64.zero;

  /**
   * @generated from field: map<string, float> trafficSources = 11;
   */
  trafficSources: { [key: string]: number } = {};

  /**
   * @generated from field: float views = 12;
   */
  views = 0;

  constructor(data?: PartialMessage<WebTraffic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.WebTraffic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ageDistribution", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 2 /* ScalarType.FLOAT */} },
    { no: 2, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "genderDistribution", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 2 /* ScalarType.FLOAT */} },
    { no: 4, name: "isSmallSite", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "bounceRateFormatted", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "pagesPerVisit", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "visitsAvgDurationFormatted", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "visitsHistory", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 3 /* ScalarType.INT64 */} },
    { no: 9, name: "visitsTotalCount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "visitsTotalCountRank", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "trafficSources", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 2 /* ScalarType.FLOAT */} },
    { no: 12, name: "views", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebTraffic {
    return new WebTraffic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebTraffic {
    return new WebTraffic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebTraffic {
    return new WebTraffic().fromJsonString(jsonString, options);
  }

  static equals(a: WebTraffic | PlainMessage<WebTraffic> | undefined, b: WebTraffic | PlainMessage<WebTraffic> | undefined): boolean {
    return proto3.util.equals(WebTraffic, a, b);
  }
}

/**
 * @generated from message search_engine.ContactNumber
 */
export class ContactNumber extends Message<ContactNumber> {
  /**
   * @generated from field: string country = 1;
   */
  country = "";

  /**
   * @generated from field: string number = 2;
   */
  number = "";

  /**
   * @generated from field: bool primary = 3;
   */
  primary = false;

  constructor(data?: PartialMessage<ContactNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.ContactNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "primary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactNumber {
    return new ContactNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactNumber {
    return new ContactNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactNumber {
    return new ContactNumber().fromJsonString(jsonString, options);
  }

  static equals(a: ContactNumber | PlainMessage<ContactNumber> | undefined, b: ContactNumber | PlainMessage<ContactNumber> | undefined): boolean {
    return proto3.util.equals(ContactNumber, a, b);
  }
}

/**
 * @generated from message search_engine.Registration
 */
export class Registration extends Message<Registration> {
  /**
   * @generated from field: string number = 1;
   */
  number = "";

  /**
   * @generated from field: string country = 2;
   */
  country = "";

  /**
   * @generated from field: string state = 3;
   */
  state = "";

  /**
   * @generated from field: string vat = 4;
   */
  vat = "";

  constructor(data?: PartialMessage<Registration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Registration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vat", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Registration {
    return new Registration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Registration {
    return new Registration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Registration {
    return new Registration().fromJsonString(jsonString, options);
  }

  static equals(a: Registration | PlainMessage<Registration> | undefined, b: Registration | PlainMessage<Registration> | undefined): boolean {
    return proto3.util.equals(Registration, a, b);
  }
}

/**
 * @generated from message search_engine.DepartmentSizes
 */
export class DepartmentSizes extends Message<DepartmentSizes> {
  /**
   * @generated from field: int32 accountingAndFinance = 1;
   */
  accountingAndFinance = 0;

  /**
   * @generated from field: int32 board = 2;
   */
  board = 0;

  /**
   * @generated from field: int32 businessSupport = 3;
   */
  businessSupport = 0;

  /**
   * @generated from field: int32 customerRelations = 4;
   */
  customerRelations = 0;

  /**
   * @generated from field: int32 design = 5;
   */
  design = 0;

  /**
   * @generated from field: int32 editorialPersonnel = 6;
   */
  editorialPersonnel = 0;

  /**
   * @generated from field: int32 engineering = 7;
   */
  engineering = 0;

  /**
   * @generated from field: int32 founderOwner = 8;
   */
  founderOwner = 0;

  /**
   * @generated from field: int32 healthcare = 9;
   */
  healthcare = 0;

  /**
   * @generated from field: int32 hr = 10;
   */
  hr = 0;

  /**
   * @generated from field: int32 legal = 11;
   */
  legal = 0;

  /**
   * @generated from field: int32 management = 12;
   */
  management = 0;

  /**
   * @generated from field: int32 manufacturing = 13;
   */
  manufacturing = 0;

  /**
   * @generated from field: int32 marketingAndAdvertising = 14;
   */
  marketingAndAdvertising = 0;

  /**
   * @generated from field: int32 operations = 15;
   */
  operations = 0;

  /**
   * @generated from field: int32 other = 16;
   */
  other = 0;

  /**
   * @generated from field: int32 prAndCommunications = 17;
   */
  prAndCommunications = 0;

  /**
   * @generated from field: int32 procurement = 18;
   */
  procurement = 0;

  /**
   * @generated from field: int32 product = 19;
   */
  product = 0;

  /**
   * @generated from field: int32 qualityControl = 20;
   */
  qualityControl = 0;

  /**
   * @generated from field: int32 rd = 21;
   */
  rd = 0;

  /**
   * @generated from field: int32 sales = 22;
   */
  sales = 0;

  /**
   * @generated from field: int32 security = 23;
   */
  security = 0;

  /**
   * @generated from field: int32 supplyChain = 24;
   */
  supplyChain = 0;

  constructor(data?: PartialMessage<DepartmentSizes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.DepartmentSizes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accountingAndFinance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "board", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "businessSupport", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "customerRelations", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "design", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "editorialPersonnel", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "engineering", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "founderOwner", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "healthcare", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "hr", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "legal", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "management", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "manufacturing", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "marketingAndAdvertising", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "operations", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "other", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "prAndCommunications", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "procurement", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 19, name: "product", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: "qualityControl", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 21, name: "rd", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 22, name: "sales", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 23, name: "security", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 24, name: "supplyChain", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DepartmentSizes {
    return new DepartmentSizes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DepartmentSizes {
    return new DepartmentSizes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DepartmentSizes {
    return new DepartmentSizes().fromJsonString(jsonString, options);
  }

  static equals(a: DepartmentSizes | PlainMessage<DepartmentSizes> | undefined, b: DepartmentSizes | PlainMessage<DepartmentSizes> | undefined): boolean {
    return proto3.util.equals(DepartmentSizes, a, b);
  }
}

/**
 * @generated from message search_engine.Triggers
 */
export class Triggers extends Message<Triggers> {
  /**
   * @generated from field: search_engine.Trigger account = 1;
   */
  account?: Trigger;

  /**
   * @generated from field: search_engine.Trigger audio = 2;
   */
  audio?: Trigger;

  /**
   * @generated from field: search_engine.Trigger cart = 3;
   */
  cart?: Trigger;

  /**
   * @generated from field: search_engine.Trigger subscription = 4;
   */
  subscription?: Trigger;

  /**
   * @generated from field: search_engine.Trigger video = 5;
   */
  video?: Trigger;

  constructor(data?: PartialMessage<Triggers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Triggers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Trigger },
    { no: 2, name: "audio", kind: "message", T: Trigger },
    { no: 3, name: "cart", kind: "message", T: Trigger },
    { no: 4, name: "subscription", kind: "message", T: Trigger },
    { no: 5, name: "video", kind: "message", T: Trigger },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Triggers {
    return new Triggers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Triggers {
    return new Triggers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Triggers {
    return new Triggers().fromJsonString(jsonString, options);
  }

  static equals(a: Triggers | PlainMessage<Triggers> | undefined, b: Triggers | PlainMessage<Triggers> | undefined): boolean {
    return proto3.util.equals(Triggers, a, b);
  }
}

/**
 * @generated from message search_engine.Trigger
 */
export class Trigger extends Message<Trigger> {
  /**
   * @generated from field: int32 int_link = 1;
   */
  intLink = 0;

  /**
   * @generated from field: int32 ext_link = 2;
   */
  extLink = 0;

  /**
   * @generated from field: int32 text = 3;
   */
  text = 0;

  /**
   * @generated from field: int32 code = 4;
   */
  code = 0;

  /**
   * @generated from field: int32 total = 5;
   */
  total = 0;

  constructor(data?: PartialMessage<Trigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Trigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "int_link", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "ext_link", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "text", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger {
    return new Trigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger {
    return new Trigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger {
    return new Trigger().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger | PlainMessage<Trigger> | undefined, b: Trigger | PlainMessage<Trigger> | undefined): boolean {
    return proto3.util.equals(Trigger, a, b);
  }
}

/**
 * @generated from message search_engine.IntentData
 */
export class IntentData extends Message<IntentData> {
  /**
   * @generated from field: string topic = 1;
   */
  topic = "";

  /**
   * @generated from field: string category = 2;
   */
  category = "";

  /**
   * @generated from field: float compositeScore = 3;
   */
  compositeScore = 0;

  constructor(data?: PartialMessage<IntentData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.IntentData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "compositeScore", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentData {
    return new IntentData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentData {
    return new IntentData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentData {
    return new IntentData().fromJsonString(jsonString, options);
  }

  static equals(a: IntentData | PlainMessage<IntentData> | undefined, b: IntentData | PlainMessage<IntentData> | undefined): boolean {
    return proto3.util.equals(IntentData, a, b);
  }
}

/**
 * @generated from message search_engine.ImpressumPersonData
 */
export class ImpressumPersonData extends Message<ImpressumPersonData> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional string position = 2;
   */
  position?: string;

  constructor(data?: PartialMessage<ImpressumPersonData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.ImpressumPersonData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "position", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImpressumPersonData {
    return new ImpressumPersonData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImpressumPersonData {
    return new ImpressumPersonData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImpressumPersonData {
    return new ImpressumPersonData().fromJsonString(jsonString, options);
  }

  static equals(a: ImpressumPersonData | PlainMessage<ImpressumPersonData> | undefined, b: ImpressumPersonData | PlainMessage<ImpressumPersonData> | undefined): boolean {
    return proto3.util.equals(ImpressumPersonData, a, b);
  }
}

/**
 * @generated from message search_engine.ImpressumAddressData
 */
export class ImpressumAddressData extends Message<ImpressumAddressData> {
  /**
   * @generated from field: optional string rawAddress = 1;
   */
  rawAddress?: string;

  constructor(data?: PartialMessage<ImpressumAddressData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.ImpressumAddressData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rawAddress", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImpressumAddressData {
    return new ImpressumAddressData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImpressumAddressData {
    return new ImpressumAddressData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImpressumAddressData {
    return new ImpressumAddressData().fromJsonString(jsonString, options);
  }

  static equals(a: ImpressumAddressData | PlainMessage<ImpressumAddressData> | undefined, b: ImpressumAddressData | PlainMessage<ImpressumAddressData> | undefined): boolean {
    return proto3.util.equals(ImpressumAddressData, a, b);
  }
}

/**
 * @generated from message search_engine.ImpressumData
 */
export class ImpressumData extends Message<ImpressumData> {
  /**
   * @generated from field: optional string company = 1;
   */
  company?: string;

  /**
   * @generated from field: search_engine.ImpressumAddressData address = 2;
   */
  address?: ImpressumAddressData;

  /**
   * @generated from field: optional string email = 3;
   */
  email?: string;

  /**
   * @generated from field: optional string phone = 4;
   */
  phone?: string;

  /**
   * @generated from field: optional string fax = 5;
   */
  fax?: string;

  /**
   * @generated from field: optional string vat_number = 6;
   */
  vatNumber?: string;

  /**
   * @generated from field: repeated search_engine.ImpressumPersonData people = 7;
   */
  people: ImpressumPersonData[] = [];

  /**
   * @generated from field: optional string url = 8;
   */
  url?: string;

  constructor(data?: PartialMessage<ImpressumData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.ImpressumData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "company", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "address", kind: "message", T: ImpressumAddressData },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "fax", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "vat_number", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "people", kind: "message", T: ImpressumPersonData, repeated: true },
    { no: 8, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImpressumData {
    return new ImpressumData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImpressumData {
    return new ImpressumData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImpressumData {
    return new ImpressumData().fromJsonString(jsonString, options);
  }

  static equals(a: ImpressumData | PlainMessage<ImpressumData> | undefined, b: ImpressumData | PlainMessage<ImpressumData> | undefined): boolean {
    return proto3.util.equals(ImpressumData, a, b);
  }
}

