// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file search_engine_people-v1.proto (package search_engine, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message search_engine.Person
 */
export class Person extends Message<Person> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string firstName = 3;
   */
  firstName = "";

  /**
   * @generated from field: string lastName = 4;
   */
  lastName = "";

  /**
   * @generated from field: string location = 5;
   */
  location = "";

  /**
   * @generated from field: repeated string seniorities = 6;
   */
  seniorities: string[] = [];

  /**
   * @generated from field: string photo = 7;
   */
  photo = "";

  /**
   * @generated from field: string jobTitle = 8;
   */
  jobTitle = "";

  /**
   * @generated from field: search_engine.Email email = 9;
   */
  email?: Email;

  /**
   * @generated from field: repeated string departments = 10;
   */
  departments: string[] = [];

  /**
   * @generated from field: string country = 11;
   */
  country = "";

  /**
   * @generated from field: string domain = 12;
   */
  domain = "";

  /**
   * @generated from field: string updatedAt = 13;
   */
  updatedAt = "";

  /**
   * @generated from field: string shorthandName = 14;
   */
  shorthandName = "";

  /**
   * @generated from field: string canonicalShorthandName = 15;
   */
  canonicalShorthandName = "";

  /**
   * @generated from field: string linkedinCompany = 16;
   */
  linkedinCompany = "";

  /**
   * @generated from field: repeated float jobTitleVector = 17;
   */
  jobTitleVector: number[] = [];

  /**
   * @generated from field: map<string, string> emailPatterns = 18;
   */
  emailPatterns: { [key: string]: string } = {};

  /**
   * @generated from field: string summary = 19;
   */
  summary = "";

  /**
   * @generated from field: map<string, float> senioritiesRank = 20;
   */
  senioritiesRank: { [key: string]: number } = {};

  constructor(data?: PartialMessage<Person>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Person";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "firstName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lastName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "seniorities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "photo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "jobTitle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "email", kind: "message", T: Email },
    { no: 10, name: "departments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "updatedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "shorthandName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "canonicalShorthandName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "linkedinCompany", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "jobTitleVector", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 18, name: "emailPatterns", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 19, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "senioritiesRank", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 2 /* ScalarType.FLOAT */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Person {
    return new Person().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Person {
    return new Person().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Person {
    return new Person().fromJsonString(jsonString, options);
  }

  static equals(a: Person | PlainMessage<Person> | undefined, b: Person | PlainMessage<Person> | undefined): boolean {
    return proto3.util.equals(Person, a, b);
  }
}

/**
 * @generated from message search_engine.Email
 */
export class Email extends Message<Email> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: bool verified = 2;
   */
  verified = false;

  /**
   * @generated from field: float confidence = 3;
   */
  confidence = 0;

  /**
   * @generated from field: string verificationAttemptedAt = 4;
   */
  verificationAttemptedAt = "";

  /**
   * @generated from field: repeated string provenance = 5;
   */
  provenance: string[] = [];

  /**
   * @generated from field: bool verifying = 6;
   */
  verifying = false;

  constructor(data?: PartialMessage<Email>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.Email";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "confidence", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "verificationAttemptedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "provenance", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "verifying", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Email {
    return new Email().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Email {
    return new Email().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Email {
    return new Email().fromJsonString(jsonString, options);
  }

  static equals(a: Email | PlainMessage<Email> | undefined, b: Email | PlainMessage<Email> | undefined): boolean {
    return proto3.util.equals(Email, a, b);
  }
}

/**
 * @generated from message search_engine.EmailGuesser
 */
export class EmailGuesser extends Message<EmailGuesser> {
  /**
   * @generated from field: string confidence = 1;
   */
  confidence = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<EmailGuesser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.EmailGuesser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "confidence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailGuesser {
    return new EmailGuesser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailGuesser {
    return new EmailGuesser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailGuesser {
    return new EmailGuesser().fromJsonString(jsonString, options);
  }

  static equals(a: EmailGuesser | PlainMessage<EmailGuesser> | undefined, b: EmailGuesser | PlainMessage<EmailGuesser> | undefined): boolean {
    return proto3.util.equals(EmailGuesser, a, b);
  }
}

