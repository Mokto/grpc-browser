// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file search_engine_options-v1.proto (package search_engine, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message search_engine.FieldOptions
 */
export class FieldOptions extends Message<FieldOptions> {
  /**
   * @generated from field: optional string title = 1;
   */
  title?: string;

  /**
   * @generated from field: optional string example = 2;
   */
  example?: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: bool exclude = 4;
   */
  exclude = false;

  /**
   * @generated from field: optional int32 min = 5;
   */
  min?: number;

  /**
   * @generated from field: optional int32 max = 6;
   */
  max?: number;

  constructor(data?: PartialMessage<FieldOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.FieldOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "example", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "exclude", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "min", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "max", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldOptions {
    return new FieldOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldOptions {
    return new FieldOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldOptions {
    return new FieldOptions().fromJsonString(jsonString, options);
  }

  static equals(a: FieldOptions | PlainMessage<FieldOptions> | undefined, b: FieldOptions | PlainMessage<FieldOptions> | undefined): boolean {
    return proto3.util.equals(FieldOptions, a, b);
  }
}

/**
 * @generated from message search_engine.MessageOptions
 */
export class MessageOptions extends Message<MessageOptions> {
  /**
   * @generated from field: optional bool forbidExtra = 1;
   */
  forbidExtra?: boolean;

  constructor(data?: PartialMessage<MessageOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search_engine.MessageOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forbidExtra", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageOptions {
    return new MessageOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageOptions {
    return new MessageOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageOptions {
    return new MessageOptions().fromJsonString(jsonString, options);
  }

  static equals(a: MessageOptions | PlainMessage<MessageOptions> | undefined, b: MessageOptions | PlainMessage<MessageOptions> | undefined): boolean {
    return proto3.util.equals(MessageOptions, a, b);
  }
}

